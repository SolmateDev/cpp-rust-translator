// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/basic.proto

#include "proto/basic.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace basic {
constexpr AccountInfo::AccountInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , slot_(uint64_t{0u}){}
struct AccountInfoDefaultTypeInternal {
  constexpr AccountInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountInfoDefaultTypeInternal() {}
  union {
    AccountInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountInfoDefaultTypeInternal _AccountInfo_default_instance_;
constexpr SignedTx::SignedTx(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tx_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SignedTxDefaultTypeInternal {
  constexpr SignedTxDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignedTxDefaultTypeInternal() {}
  union {
    SignedTx _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignedTxDefaultTypeInternal _SignedTx_default_instance_;
constexpr TxStatusWithSlot::TxStatusWithSlot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slot_(uint64_t{0u})
  , status_(0)
{}
struct TxStatusWithSlotDefaultTypeInternal {
  constexpr TxStatusWithSlotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TxStatusWithSlotDefaultTypeInternal() {}
  union {
    TxStatusWithSlot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TxStatusWithSlotDefaultTypeInternal _TxStatusWithSlot_default_instance_;
constexpr Empty::Empty(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct EmptyDefaultTypeInternal {
  constexpr EmptyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EmptyDefaultTypeInternal() {}
  union {
    Empty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EmptyDefaultTypeInternal _Empty_default_instance_;
constexpr Pubkey::Pubkey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PubkeyDefaultTypeInternal {
  constexpr PubkeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PubkeyDefaultTypeInternal() {}
  union {
    Pubkey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PubkeyDefaultTypeInternal _Pubkey_default_instance_;
constexpr Keypair::Keypair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct KeypairDefaultTypeInternal {
  constexpr KeypairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeypairDefaultTypeInternal() {}
  union {
    Keypair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeypairDefaultTypeInternal _Keypair_default_instance_;
constexpr ProgramId::ProgramId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr){}
struct ProgramIdDefaultTypeInternal {
  constexpr ProgramIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProgramIdDefaultTypeInternal() {}
  union {
    ProgramId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProgramIdDefaultTypeInternal _ProgramId_default_instance_;
}  // namespace basic
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fbasic_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2fbasic_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fbasic_2eproto = nullptr;

const uint32_t TableStruct_proto_2fbasic_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::basic::AccountInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::basic::AccountInfo, slot_),
  PROTOBUF_FIELD_OFFSET(::basic::AccountInfo, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::basic::SignedTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::basic::SignedTx, tx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::basic::TxStatusWithSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::basic::TxStatusWithSlot, status_),
  PROTOBUF_FIELD_OFFSET(::basic::TxStatusWithSlot, slot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::basic::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::basic::Pubkey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::basic::Pubkey, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::basic::Keypair, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::basic::Keypair, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::basic::Keypair, input_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::basic::ProgramId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::basic::ProgramId, id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::basic::AccountInfo)},
  { 8, -1, -1, sizeof(::basic::SignedTx)},
  { 15, -1, -1, sizeof(::basic::TxStatusWithSlot)},
  { 23, -1, -1, sizeof(::basic::Empty)},
  { 29, -1, -1, sizeof(::basic::Pubkey)},
  { 36, -1, -1, sizeof(::basic::Keypair)},
  { 45, -1, -1, sizeof(::basic::ProgramId)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::basic::_AccountInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::basic::_SignedTx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::basic::_TxStatusWithSlot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::basic::_Empty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::basic::_Pubkey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::basic::_Keypair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::basic::_ProgramId_default_instance_),
};

const char descriptor_table_protodef_proto_2fbasic_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021proto/basic.proto\022\005basic\"*\n\013AccountInf"
  "o\022\014\n\004slot\030\001 \001(\004\022\r\n\005value\030\002 \001(\014\"\026\n\010Signed"
  "Tx\022\n\n\002tx\030\001 \001(\014\"A\n\020TxStatusWithSlot\022\037\n\006st"
  "atus\030\001 \001(\0162\017.basic.TxStatus\022\014\n\004slot\030\002 \001("
  "\004\"\007\n\005Empty\"\026\n\006Pubkey\022\014\n\004data\030\001 \001(\014\"9\n\007Ke"
  "ypair\022\016\n\004seed\030\001 \001(\014H\000\022\025\n\013private_key\030\002 \001"
  "(\014H\000B\007\n\005input\"&\n\tProgramId\022\031\n\002id\030\001 \001(\0132\r"
  ".basic.Pubkey*7\n\010TxStatus\022\r\n\tPROCESSED\020\000"
  "\022\r\n\tCONFIRMED\020\001\022\r\n\tFINALIZED\020\002B0Z.github"
  ".com/SolmateDev/go-rust-translator/basic"
  "b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fbasic_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fbasic_2eproto = {
  false, false, 408, descriptor_table_protodef_proto_2fbasic_2eproto, "proto/basic.proto", 
  &descriptor_table_proto_2fbasic_2eproto_once, nullptr, 0, 7,
  schemas, file_default_instances, TableStruct_proto_2fbasic_2eproto::offsets,
  file_level_metadata_proto_2fbasic_2eproto, file_level_enum_descriptors_proto_2fbasic_2eproto, file_level_service_descriptors_proto_2fbasic_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_proto_2fbasic_2eproto_getter() {
  return &descriptor_table_proto_2fbasic_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_proto_2fbasic_2eproto(&descriptor_table_proto_2fbasic_2eproto);
namespace basic {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TxStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fbasic_2eproto);
  return file_level_enum_descriptors_proto_2fbasic_2eproto[0];
}
bool TxStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class AccountInfo::_Internal {
 public:
};

AccountInfo::AccountInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:basic.AccountInfo)
}
AccountInfo::AccountInfo(const AccountInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  slot_ = from.slot_;
  // @@protoc_insertion_point(copy_constructor:basic.AccountInfo)
}

inline void AccountInfo::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
slot_ = uint64_t{0u};
}

AccountInfo::~AccountInfo() {
  // @@protoc_insertion_point(destructor:basic.AccountInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AccountInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountInfo::ArenaDtor(void* object) {
  AccountInfo* _this = reinterpret_cast< AccountInfo* >(object);
  (void)_this;
}
void AccountInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:basic.AccountInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  slot_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccountInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:basic.AccountInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 slot = 1;
  if (this->_internal_slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_slot(), target);
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:basic.AccountInfo)
  return target;
}

size_t AccountInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:basic.AccountInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // uint64 slot = 1;
  if (this->_internal_slot() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_slot());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccountInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountInfo::GetClassData() const { return &_class_data_; }

void AccountInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AccountInfo *>(to)->MergeFrom(
      static_cast<const AccountInfo &>(from));
}


void AccountInfo::MergeFrom(const AccountInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:basic.AccountInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_slot() != 0) {
    _internal_set_slot(from._internal_slot());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountInfo::CopyFrom(const AccountInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:basic.AccountInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountInfo::IsInitialized() const {
  return true;
}

void AccountInfo::InternalSwap(AccountInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  swap(slot_, other->slot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fbasic_2eproto_getter, &descriptor_table_proto_2fbasic_2eproto_once,
      file_level_metadata_proto_2fbasic_2eproto[0]);
}

// ===================================================================

class SignedTx::_Internal {
 public:
};

SignedTx::SignedTx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:basic.SignedTx)
}
SignedTx::SignedTx(const SignedTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tx_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx().empty()) {
    tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tx(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:basic.SignedTx)
}

inline void SignedTx::SharedCtor() {
tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tx_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SignedTx::~SignedTx() {
  // @@protoc_insertion_point(destructor:basic.SignedTx)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SignedTx::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tx_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SignedTx::ArenaDtor(void* object) {
  SignedTx* _this = reinterpret_cast< SignedTx* >(object);
  (void)_this;
}
void SignedTx::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignedTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignedTx::Clear() {
// @@protoc_insertion_point(message_clear_start:basic.SignedTx)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignedTx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes tx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tx();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignedTx::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:basic.SignedTx)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes tx = 1;
  if (!this->_internal_tx().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_tx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:basic.SignedTx)
  return target;
}

size_t SignedTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:basic.SignedTx)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes tx = 1;
  if (!this->_internal_tx().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignedTx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SignedTx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignedTx::GetClassData() const { return &_class_data_; }

void SignedTx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SignedTx *>(to)->MergeFrom(
      static_cast<const SignedTx &>(from));
}


void SignedTx::MergeFrom(const SignedTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:basic.SignedTx)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tx().empty()) {
    _internal_set_tx(from._internal_tx());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignedTx::CopyFrom(const SignedTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:basic.SignedTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedTx::IsInitialized() const {
  return true;
}

void SignedTx::InternalSwap(SignedTx* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tx_, lhs_arena,
      &other->tx_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SignedTx::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fbasic_2eproto_getter, &descriptor_table_proto_2fbasic_2eproto_once,
      file_level_metadata_proto_2fbasic_2eproto[1]);
}

// ===================================================================

class TxStatusWithSlot::_Internal {
 public:
};

TxStatusWithSlot::TxStatusWithSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:basic.TxStatusWithSlot)
}
TxStatusWithSlot::TxStatusWithSlot(const TxStatusWithSlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&slot_, &from.slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&slot_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:basic.TxStatusWithSlot)
}

inline void TxStatusWithSlot::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&slot_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&slot_)) + sizeof(status_));
}

TxStatusWithSlot::~TxStatusWithSlot() {
  // @@protoc_insertion_point(destructor:basic.TxStatusWithSlot)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TxStatusWithSlot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TxStatusWithSlot::ArenaDtor(void* object) {
  TxStatusWithSlot* _this = reinterpret_cast< TxStatusWithSlot* >(object);
  (void)_this;
}
void TxStatusWithSlot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TxStatusWithSlot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TxStatusWithSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:basic.TxStatusWithSlot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&slot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&slot_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxStatusWithSlot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .basic.TxStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::basic::TxStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxStatusWithSlot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:basic.TxStatusWithSlot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .basic.TxStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // uint64 slot = 2;
  if (this->_internal_slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:basic.TxStatusWithSlot)
  return target;
}

size_t TxStatusWithSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:basic.TxStatusWithSlot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 slot = 2;
  if (this->_internal_slot() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_slot());
  }

  // .basic.TxStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxStatusWithSlot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TxStatusWithSlot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxStatusWithSlot::GetClassData() const { return &_class_data_; }

void TxStatusWithSlot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TxStatusWithSlot *>(to)->MergeFrom(
      static_cast<const TxStatusWithSlot &>(from));
}


void TxStatusWithSlot::MergeFrom(const TxStatusWithSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:basic.TxStatusWithSlot)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_slot() != 0) {
    _internal_set_slot(from._internal_slot());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxStatusWithSlot::CopyFrom(const TxStatusWithSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:basic.TxStatusWithSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxStatusWithSlot::IsInitialized() const {
  return true;
}

void TxStatusWithSlot::InternalSwap(TxStatusWithSlot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TxStatusWithSlot, status_)
      + sizeof(TxStatusWithSlot::status_)
      - PROTOBUF_FIELD_OFFSET(TxStatusWithSlot, slot_)>(
          reinterpret_cast<char*>(&slot_),
          reinterpret_cast<char*>(&other->slot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TxStatusWithSlot::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fbasic_2eproto_getter, &descriptor_table_proto_2fbasic_2eproto_once,
      file_level_metadata_proto_2fbasic_2eproto[2]);
}

// ===================================================================

class Empty::_Internal {
 public:
};

Empty::Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:basic.Empty)
}
Empty::Empty(const Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:basic.Empty)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Empty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Empty::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Empty::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fbasic_2eproto_getter, &descriptor_table_proto_2fbasic_2eproto_once,
      file_level_metadata_proto_2fbasic_2eproto[3]);
}

// ===================================================================

class Pubkey::_Internal {
 public:
};

Pubkey::Pubkey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:basic.Pubkey)
}
Pubkey::Pubkey(const Pubkey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:basic.Pubkey)
}

inline void Pubkey::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Pubkey::~Pubkey() {
  // @@protoc_insertion_point(destructor:basic.Pubkey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Pubkey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Pubkey::ArenaDtor(void* object) {
  Pubkey* _this = reinterpret_cast< Pubkey* >(object);
  (void)_this;
}
void Pubkey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pubkey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pubkey::Clear() {
// @@protoc_insertion_point(message_clear_start:basic.Pubkey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pubkey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pubkey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:basic.Pubkey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:basic.Pubkey)
  return target;
}

size_t Pubkey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:basic.Pubkey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pubkey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Pubkey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pubkey::GetClassData() const { return &_class_data_; }

void Pubkey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Pubkey *>(to)->MergeFrom(
      static_cast<const Pubkey &>(from));
}


void Pubkey::MergeFrom(const Pubkey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:basic.Pubkey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pubkey::CopyFrom(const Pubkey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:basic.Pubkey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pubkey::IsInitialized() const {
  return true;
}

void Pubkey::InternalSwap(Pubkey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Pubkey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fbasic_2eproto_getter, &descriptor_table_proto_2fbasic_2eproto_once,
      file_level_metadata_proto_2fbasic_2eproto[4]);
}

// ===================================================================

class Keypair::_Internal {
 public:
};

Keypair::Keypair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:basic.Keypair)
}
Keypair::Keypair(const Keypair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_input();
  switch (from.input_case()) {
    case kSeed: {
      _internal_set_seed(from._internal_seed());
      break;
    }
    case kPrivateKey: {
      _internal_set_private_key(from._internal_private_key());
      break;
    }
    case INPUT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:basic.Keypair)
}

inline void Keypair::SharedCtor() {
clear_has_input();
}

Keypair::~Keypair() {
  // @@protoc_insertion_point(destructor:basic.Keypair)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Keypair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_input()) {
    clear_input();
  }
}

void Keypair::ArenaDtor(void* object) {
  Keypair* _this = reinterpret_cast< Keypair* >(object);
  (void)_this;
}
void Keypair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Keypair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Keypair::clear_input() {
// @@protoc_insertion_point(one_of_clear_start:basic.Keypair)
  switch (input_case()) {
    case kSeed: {
      input_.seed_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kPrivateKey: {
      input_.private_key_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case INPUT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INPUT_NOT_SET;
}


void Keypair::Clear() {
// @@protoc_insertion_point(message_clear_start:basic.Keypair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_input();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Keypair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes seed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_seed();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes private_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Keypair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:basic.Keypair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes seed = 1;
  if (_internal_has_seed()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_seed(), target);
  }

  // bytes private_key = 2;
  if (_internal_has_private_key()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_private_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:basic.Keypair)
  return target;
}

size_t Keypair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:basic.Keypair)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (input_case()) {
    // bytes seed = 1;
    case kSeed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_seed());
      break;
    }
    // bytes private_key = 2;
    case kPrivateKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_private_key());
      break;
    }
    case INPUT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Keypair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Keypair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Keypair::GetClassData() const { return &_class_data_; }

void Keypair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Keypair *>(to)->MergeFrom(
      static_cast<const Keypair &>(from));
}


void Keypair::MergeFrom(const Keypair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:basic.Keypair)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.input_case()) {
    case kSeed: {
      _internal_set_seed(from._internal_seed());
      break;
    }
    case kPrivateKey: {
      _internal_set_private_key(from._internal_private_key());
      break;
    }
    case INPUT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Keypair::CopyFrom(const Keypair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:basic.Keypair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Keypair::IsInitialized() const {
  return true;
}

void Keypair::InternalSwap(Keypair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(input_, other->input_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Keypair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fbasic_2eproto_getter, &descriptor_table_proto_2fbasic_2eproto_once,
      file_level_metadata_proto_2fbasic_2eproto[5]);
}

// ===================================================================

class ProgramId::_Internal {
 public:
  static const ::basic::Pubkey& id(const ProgramId* msg);
};

const ::basic::Pubkey&
ProgramId::_Internal::id(const ProgramId* msg) {
  return *msg->id_;
}
ProgramId::ProgramId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:basic.ProgramId)
}
ProgramId::ProgramId(const ProgramId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::basic::Pubkey(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:basic.ProgramId)
}

inline void ProgramId::SharedCtor() {
id_ = nullptr;
}

ProgramId::~ProgramId() {
  // @@protoc_insertion_point(destructor:basic.ProgramId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProgramId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void ProgramId::ArenaDtor(void* object) {
  ProgramId* _this = reinterpret_cast< ProgramId* >(object);
  (void)_this;
}
void ProgramId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProgramId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProgramId::Clear() {
// @@protoc_insertion_point(message_clear_start:basic.ProgramId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProgramId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .basic.Pubkey id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProgramId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:basic.ProgramId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .basic.Pubkey id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:basic.ProgramId)
  return target;
}

size_t ProgramId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:basic.ProgramId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .basic.Pubkey id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProgramId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProgramId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProgramId::GetClassData() const { return &_class_data_; }

void ProgramId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProgramId *>(to)->MergeFrom(
      static_cast<const ProgramId &>(from));
}


void ProgramId::MergeFrom(const ProgramId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:basic.ProgramId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_mutable_id()->::basic::Pubkey::MergeFrom(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProgramId::CopyFrom(const ProgramId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:basic.ProgramId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProgramId::IsInitialized() const {
  return true;
}

void ProgramId::InternalSwap(ProgramId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProgramId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fbasic_2eproto_getter, &descriptor_table_proto_2fbasic_2eproto_once,
      file_level_metadata_proto_2fbasic_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace basic
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::basic::AccountInfo* Arena::CreateMaybeMessage< ::basic::AccountInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::basic::AccountInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::basic::SignedTx* Arena::CreateMaybeMessage< ::basic::SignedTx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::basic::SignedTx >(arena);
}
template<> PROTOBUF_NOINLINE ::basic::TxStatusWithSlot* Arena::CreateMaybeMessage< ::basic::TxStatusWithSlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::basic::TxStatusWithSlot >(arena);
}
template<> PROTOBUF_NOINLINE ::basic::Empty* Arena::CreateMaybeMessage< ::basic::Empty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::basic::Empty >(arena);
}
template<> PROTOBUF_NOINLINE ::basic::Pubkey* Arena::CreateMaybeMessage< ::basic::Pubkey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::basic::Pubkey >(arena);
}
template<> PROTOBUF_NOINLINE ::basic::Keypair* Arena::CreateMaybeMessage< ::basic::Keypair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::basic::Keypair >(arena);
}
template<> PROTOBUF_NOINLINE ::basic::ProgramId* Arena::CreateMaybeMessage< ::basic::ProgramId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::basic::ProgramId >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
