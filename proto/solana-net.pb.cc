// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/solana-net.proto

#include "proto/solana-net.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace solananet {
constexpr SendBatchRequest::SendBatchRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tx_()
  , confirmation_level_(0)
{}
struct SendBatchRequestDefaultTypeInternal {
  constexpr SendBatchRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendBatchRequestDefaultTypeInternal() {}
  union {
    SendBatchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendBatchRequestDefaultTypeInternal _SendBatchRequest_default_instance_;
constexpr SendBatchResponse::SendBatchResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signature_(){}
struct SendBatchResponseDefaultTypeInternal {
  constexpr SendBatchResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendBatchResponseDefaultTypeInternal() {}
  union {
    SendBatchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendBatchResponseDefaultTypeInternal _SendBatchResponse_default_instance_;
}  // namespace solananet
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fsolana_2dnet_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2fsolana_2dnet_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fsolana_2dnet_2eproto = nullptr;

const uint32_t TableStruct_proto_2fsolana_2dnet_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::solananet::SendBatchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::solananet::SendBatchRequest, tx_),
  PROTOBUF_FIELD_OFFSET(::solananet::SendBatchRequest, confirmation_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::solananet::SendBatchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::solananet::SendBatchResponse, signature_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::solananet::SendBatchRequest)},
  { 8, -1, -1, sizeof(::solananet::SendBatchResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::solananet::_SendBatchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::solananet::_SendBatchResponse_default_instance_),
};

const char descriptor_table_protodef_proto_2fsolana_2dnet_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026proto/solana-net.proto\022\tsolananet\"X\n\020S"
  "endBatchRequest\022\n\n\002tx\030\001 \003(\014\0228\n\022confirmat"
  "ion_level\030\002 \001(\0162\034.solananet.Confirmation"
  "Level\"&\n\021SendBatchResponse\022\021\n\tsignature\030"
  "\001 \003(\014*@\n\021ConfirmationLevel\022\r\n\tPROCESSED\020"
  "\000\022\r\n\tCONFIRMED\020\001\022\r\n\tFINALIZED\020\0022R\n\tBroad"
  "cast\022E\n\006SendTx\022\033.solananet.SendBatchRequ"
  "est\032\034.solananet.SendBatchResponse\"\000B4Z2g"
  "ithub.com/SolmateDev/go-rust-translator/"
  "solananetb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fsolana_2dnet_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fsolana_2dnet_2eproto = {
  false, false, 377, descriptor_table_protodef_proto_2fsolana_2dnet_2eproto, "proto/solana-net.proto", 
  &descriptor_table_proto_2fsolana_2dnet_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_proto_2fsolana_2dnet_2eproto::offsets,
  file_level_metadata_proto_2fsolana_2dnet_2eproto, file_level_enum_descriptors_proto_2fsolana_2dnet_2eproto, file_level_service_descriptors_proto_2fsolana_2dnet_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_proto_2fsolana_2dnet_2eproto_getter() {
  return &descriptor_table_proto_2fsolana_2dnet_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_proto_2fsolana_2dnet_2eproto(&descriptor_table_proto_2fsolana_2dnet_2eproto);
namespace solananet {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConfirmationLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fsolana_2dnet_2eproto);
  return file_level_enum_descriptors_proto_2fsolana_2dnet_2eproto[0];
}
bool ConfirmationLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SendBatchRequest::_Internal {
 public:
};

SendBatchRequest::SendBatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tx_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:solananet.SendBatchRequest)
}
SendBatchRequest::SendBatchRequest(const SendBatchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tx_(from.tx_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  confirmation_level_ = from.confirmation_level_;
  // @@protoc_insertion_point(copy_constructor:solananet.SendBatchRequest)
}

inline void SendBatchRequest::SharedCtor() {
confirmation_level_ = 0;
}

SendBatchRequest::~SendBatchRequest() {
  // @@protoc_insertion_point(destructor:solananet.SendBatchRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SendBatchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SendBatchRequest::ArenaDtor(void* object) {
  SendBatchRequest* _this = reinterpret_cast< SendBatchRequest* >(object);
  (void)_this;
}
void SendBatchRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendBatchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendBatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:solananet.SendBatchRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_.Clear();
  confirmation_level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendBatchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes tx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tx();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .solananet.ConfirmationLevel confirmation_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_confirmation_level(static_cast<::solananet::ConfirmationLevel>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendBatchRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:solananet.SendBatchRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes tx = 1;
  for (int i = 0, n = this->_internal_tx_size(); i < n; i++) {
    const auto& s = this->_internal_tx(i);
    target = stream->WriteBytes(1, s, target);
  }

  // .solananet.ConfirmationLevel confirmation_level = 2;
  if (this->_internal_confirmation_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_confirmation_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solananet.SendBatchRequest)
  return target;
}

size_t SendBatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:solananet.SendBatchRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes tx = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tx_.size());
  for (int i = 0, n = tx_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      tx_.Get(i));
  }

  // .solananet.ConfirmationLevel confirmation_level = 2;
  if (this->_internal_confirmation_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_confirmation_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendBatchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendBatchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendBatchRequest::GetClassData() const { return &_class_data_; }

void SendBatchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SendBatchRequest *>(to)->MergeFrom(
      static_cast<const SendBatchRequest &>(from));
}


void SendBatchRequest::MergeFrom(const SendBatchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:solananet.SendBatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tx_.MergeFrom(from.tx_);
  if (from._internal_confirmation_level() != 0) {
    _internal_set_confirmation_level(from._internal_confirmation_level());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendBatchRequest::CopyFrom(const SendBatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solananet.SendBatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendBatchRequest::IsInitialized() const {
  return true;
}

void SendBatchRequest::InternalSwap(SendBatchRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tx_.InternalSwap(&other->tx_);
  swap(confirmation_level_, other->confirmation_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendBatchRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fsolana_2dnet_2eproto_getter, &descriptor_table_proto_2fsolana_2dnet_2eproto_once,
      file_level_metadata_proto_2fsolana_2dnet_2eproto[0]);
}

// ===================================================================

class SendBatchResponse::_Internal {
 public:
};

SendBatchResponse::SendBatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  signature_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:solananet.SendBatchResponse)
}
SendBatchResponse::SendBatchResponse(const SendBatchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      signature_(from.signature_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:solananet.SendBatchResponse)
}

inline void SendBatchResponse::SharedCtor() {
}

SendBatchResponse::~SendBatchResponse() {
  // @@protoc_insertion_point(destructor:solananet.SendBatchResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SendBatchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SendBatchResponse::ArenaDtor(void* object) {
  SendBatchResponse* _this = reinterpret_cast< SendBatchResponse* >(object);
  (void)_this;
}
void SendBatchResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendBatchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendBatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:solananet.SendBatchResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendBatchResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_signature();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendBatchResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:solananet.SendBatchResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes signature = 1;
  for (int i = 0, n = this->_internal_signature_size(); i < n; i++) {
    const auto& s = this->_internal_signature(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solananet.SendBatchResponse)
  return target;
}

size_t SendBatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:solananet.SendBatchResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes signature = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(signature_.size());
  for (int i = 0, n = signature_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      signature_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendBatchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendBatchResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendBatchResponse::GetClassData() const { return &_class_data_; }

void SendBatchResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SendBatchResponse *>(to)->MergeFrom(
      static_cast<const SendBatchResponse &>(from));
}


void SendBatchResponse::MergeFrom(const SendBatchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:solananet.SendBatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  signature_.MergeFrom(from.signature_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendBatchResponse::CopyFrom(const SendBatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solananet.SendBatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendBatchResponse::IsInitialized() const {
  return true;
}

void SendBatchResponse::InternalSwap(SendBatchResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  signature_.InternalSwap(&other->signature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendBatchResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fsolana_2dnet_2eproto_getter, &descriptor_table_proto_2fsolana_2dnet_2eproto_once,
      file_level_metadata_proto_2fsolana_2dnet_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace solananet
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::solananet::SendBatchRequest* Arena::CreateMaybeMessage< ::solananet::SendBatchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::solananet::SendBatchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::solananet::SendBatchResponse* Arena::CreateMaybeMessage< ::solananet::SendBatchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::solananet::SendBatchResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
