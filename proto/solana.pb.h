// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/solana.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fsolana_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fsolana_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/basic.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fsolana_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fsolana_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fsolana_2eproto;
namespace solana {
class CreateAccount;
struct CreateAccountDefaultTypeInternal;
extern CreateAccountDefaultTypeInternal _CreateAccount_default_instance_;
class Genesis;
struct GenesisDefaultTypeInternal;
extern GenesisDefaultTypeInternal _Genesis_default_instance_;
class InitializeTokenAccount;
struct InitializeTokenAccountDefaultTypeInternal;
extern InitializeTokenAccountDefaultTypeInternal _InitializeTokenAccount_default_instance_;
class Mint;
struct MintDefaultTypeInternal;
extern MintDefaultTypeInternal _Mint_default_instance_;
class SendBatchRequest;
struct SendBatchRequestDefaultTypeInternal;
extern SendBatchRequestDefaultTypeInternal _SendBatchRequest_default_instance_;
class SendBatchResponse;
struct SendBatchResponseDefaultTypeInternal;
extern SendBatchResponseDefaultTypeInternal _SendBatchResponse_default_instance_;
}  // namespace solana
PROTOBUF_NAMESPACE_OPEN
template<> ::solana::CreateAccount* Arena::CreateMaybeMessage<::solana::CreateAccount>(Arena*);
template<> ::solana::Genesis* Arena::CreateMaybeMessage<::solana::Genesis>(Arena*);
template<> ::solana::InitializeTokenAccount* Arena::CreateMaybeMessage<::solana::InitializeTokenAccount>(Arena*);
template<> ::solana::Mint* Arena::CreateMaybeMessage<::solana::Mint>(Arena*);
template<> ::solana::SendBatchRequest* Arena::CreateMaybeMessage<::solana::SendBatchRequest>(Arena*);
template<> ::solana::SendBatchResponse* Arena::CreateMaybeMessage<::solana::SendBatchResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace solana {

enum ConfirmationLevel : int {
  PROCESSED = 0,
  CONFIRMED = 1,
  FINALIZED = 2,
  ConfirmationLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ConfirmationLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ConfirmationLevel_IsValid(int value);
constexpr ConfirmationLevel ConfirmationLevel_MIN = PROCESSED;
constexpr ConfirmationLevel ConfirmationLevel_MAX = FINALIZED;
constexpr int ConfirmationLevel_ARRAYSIZE = ConfirmationLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConfirmationLevel_descriptor();
template<typename T>
inline const std::string& ConfirmationLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConfirmationLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConfirmationLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConfirmationLevel_descriptor(), enum_t_value);
}
inline bool ConfirmationLevel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConfirmationLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConfirmationLevel>(
    ConfirmationLevel_descriptor(), name, value);
}
// ===================================================================

class SendBatchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:solana.SendBatchRequest) */ {
 public:
  inline SendBatchRequest() : SendBatchRequest(nullptr) {}
  ~SendBatchRequest() override;
  explicit constexpr SendBatchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendBatchRequest(const SendBatchRequest& from);
  SendBatchRequest(SendBatchRequest&& from) noexcept
    : SendBatchRequest() {
    *this = ::std::move(from);
  }

  inline SendBatchRequest& operator=(const SendBatchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendBatchRequest& operator=(SendBatchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendBatchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendBatchRequest* internal_default_instance() {
    return reinterpret_cast<const SendBatchRequest*>(
               &_SendBatchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SendBatchRequest& a, SendBatchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendBatchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendBatchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendBatchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendBatchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendBatchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendBatchRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendBatchRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "solana.SendBatchRequest";
  }
  protected:
  explicit SendBatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxFieldNumber = 1,
    kConfirmationLevelFieldNumber = 2,
  };
  // repeated bytes tx = 1;
  int tx_size() const;
  private:
  int _internal_tx_size() const;
  public:
  void clear_tx();
  const std::string& tx(int index) const;
  std::string* mutable_tx(int index);
  void set_tx(int index, const std::string& value);
  void set_tx(int index, std::string&& value);
  void set_tx(int index, const char* value);
  void set_tx(int index, const void* value, size_t size);
  std::string* add_tx();
  void add_tx(const std::string& value);
  void add_tx(std::string&& value);
  void add_tx(const char* value);
  void add_tx(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tx() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tx();
  private:
  const std::string& _internal_tx(int index) const;
  std::string* _internal_add_tx();
  public:

  // .solana.ConfirmationLevel confirmation_level = 2;
  void clear_confirmation_level();
  ::solana::ConfirmationLevel confirmation_level() const;
  void set_confirmation_level(::solana::ConfirmationLevel value);
  private:
  ::solana::ConfirmationLevel _internal_confirmation_level() const;
  void _internal_set_confirmation_level(::solana::ConfirmationLevel value);
  public:

  // @@protoc_insertion_point(class_scope:solana.SendBatchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tx_;
  int confirmation_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fsolana_2eproto;
};
// -------------------------------------------------------------------

class SendBatchResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:solana.SendBatchResponse) */ {
 public:
  inline SendBatchResponse() : SendBatchResponse(nullptr) {}
  ~SendBatchResponse() override;
  explicit constexpr SendBatchResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendBatchResponse(const SendBatchResponse& from);
  SendBatchResponse(SendBatchResponse&& from) noexcept
    : SendBatchResponse() {
    *this = ::std::move(from);
  }

  inline SendBatchResponse& operator=(const SendBatchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendBatchResponse& operator=(SendBatchResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendBatchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendBatchResponse* internal_default_instance() {
    return reinterpret_cast<const SendBatchResponse*>(
               &_SendBatchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SendBatchResponse& a, SendBatchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendBatchResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendBatchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendBatchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendBatchResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendBatchResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendBatchResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendBatchResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "solana.SendBatchResponse";
  }
  protected:
  explicit SendBatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 1,
  };
  // repeated bytes signature = 1;
  int signature_size() const;
  private:
  int _internal_signature_size() const;
  public:
  void clear_signature();
  const std::string& signature(int index) const;
  std::string* mutable_signature(int index);
  void set_signature(int index, const std::string& value);
  void set_signature(int index, std::string&& value);
  void set_signature(int index, const char* value);
  void set_signature(int index, const void* value, size_t size);
  std::string* add_signature();
  void add_signature(const std::string& value);
  void add_signature(std::string&& value);
  void add_signature(const char* value);
  void add_signature(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& signature() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_signature();
  private:
  const std::string& _internal_signature(int index) const;
  std::string* _internal_add_signature();
  public:

  // @@protoc_insertion_point(class_scope:solana.SendBatchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fsolana_2eproto;
};
// -------------------------------------------------------------------

class Genesis final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:solana.Genesis) */ {
 public:
  inline Genesis() : Genesis(nullptr) {}
  ~Genesis() override;
  explicit constexpr Genesis(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Genesis(const Genesis& from);
  Genesis(Genesis&& from) noexcept
    : Genesis() {
    *this = ::std::move(from);
  }

  inline Genesis& operator=(const Genesis& from) {
    CopyFrom(from);
    return *this;
  }
  inline Genesis& operator=(Genesis&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Genesis& default_instance() {
    return *internal_default_instance();
  }
  static inline const Genesis* internal_default_instance() {
    return reinterpret_cast<const Genesis*>(
               &_Genesis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Genesis& a, Genesis& b) {
    a.Swap(&b);
  }
  inline void Swap(Genesis* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Genesis* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Genesis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Genesis>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Genesis& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Genesis& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Genesis* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "solana.Genesis";
  }
  protected:
  explicit Genesis(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDecimalsFieldNumber = 4,
    kPayerFieldNumber = 1,
    kMintFieldNumber = 2,
    kOwnerFieldNumber = 3,
  };
  // bytes decimals = 4;
  void clear_decimals();
  const std::string& decimals() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_decimals(ArgT0&& arg0, ArgT... args);
  std::string* mutable_decimals();
  PROTOBUF_NODISCARD std::string* release_decimals();
  void set_allocated_decimals(std::string* decimals);
  private:
  const std::string& _internal_decimals() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_decimals(const std::string& value);
  std::string* _internal_mutable_decimals();
  public:

  // .basic.Keypair payer = 1;
  bool has_payer() const;
  private:
  bool _internal_has_payer() const;
  public:
  void clear_payer();
  const ::basic::Keypair& payer() const;
  PROTOBUF_NODISCARD ::basic::Keypair* release_payer();
  ::basic::Keypair* mutable_payer();
  void set_allocated_payer(::basic::Keypair* payer);
  private:
  const ::basic::Keypair& _internal_payer() const;
  ::basic::Keypair* _internal_mutable_payer();
  public:
  void unsafe_arena_set_allocated_payer(
      ::basic::Keypair* payer);
  ::basic::Keypair* unsafe_arena_release_payer();

  // .basic.Keypair mint = 2;
  bool has_mint() const;
  private:
  bool _internal_has_mint() const;
  public:
  void clear_mint();
  const ::basic::Keypair& mint() const;
  PROTOBUF_NODISCARD ::basic::Keypair* release_mint();
  ::basic::Keypair* mutable_mint();
  void set_allocated_mint(::basic::Keypair* mint);
  private:
  const ::basic::Keypair& _internal_mint() const;
  ::basic::Keypair* _internal_mutable_mint();
  public:
  void unsafe_arena_set_allocated_mint(
      ::basic::Keypair* mint);
  ::basic::Keypair* unsafe_arena_release_mint();

  // .basic.Pubkey owner = 3;
  bool has_owner() const;
  private:
  bool _internal_has_owner() const;
  public:
  void clear_owner();
  const ::basic::Pubkey& owner() const;
  PROTOBUF_NODISCARD ::basic::Pubkey* release_owner();
  ::basic::Pubkey* mutable_owner();
  void set_allocated_owner(::basic::Pubkey* owner);
  private:
  const ::basic::Pubkey& _internal_owner() const;
  ::basic::Pubkey* _internal_mutable_owner();
  public:
  void unsafe_arena_set_allocated_owner(
      ::basic::Pubkey* owner);
  ::basic::Pubkey* unsafe_arena_release_owner();

  // @@protoc_insertion_point(class_scope:solana.Genesis)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr decimals_;
  ::basic::Keypair* payer_;
  ::basic::Keypair* mint_;
  ::basic::Pubkey* owner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fsolana_2eproto;
};
// -------------------------------------------------------------------

class InitializeTokenAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:solana.InitializeTokenAccount) */ {
 public:
  inline InitializeTokenAccount() : InitializeTokenAccount(nullptr) {}
  ~InitializeTokenAccount() override;
  explicit constexpr InitializeTokenAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitializeTokenAccount(const InitializeTokenAccount& from);
  InitializeTokenAccount(InitializeTokenAccount&& from) noexcept
    : InitializeTokenAccount() {
    *this = ::std::move(from);
  }

  inline InitializeTokenAccount& operator=(const InitializeTokenAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitializeTokenAccount& operator=(InitializeTokenAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitializeTokenAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitializeTokenAccount* internal_default_instance() {
    return reinterpret_cast<const InitializeTokenAccount*>(
               &_InitializeTokenAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InitializeTokenAccount& a, InitializeTokenAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(InitializeTokenAccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitializeTokenAccount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitializeTokenAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitializeTokenAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitializeTokenAccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InitializeTokenAccount& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitializeTokenAccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "solana.InitializeTokenAccount";
  }
  protected:
  explicit InitializeTokenAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMintFieldNumber = 1,
    kOwnerAccountFieldNumber = 2,
  };
  // .basic.Pubkey mint = 1;
  bool has_mint() const;
  private:
  bool _internal_has_mint() const;
  public:
  void clear_mint();
  const ::basic::Pubkey& mint() const;
  PROTOBUF_NODISCARD ::basic::Pubkey* release_mint();
  ::basic::Pubkey* mutable_mint();
  void set_allocated_mint(::basic::Pubkey* mint);
  private:
  const ::basic::Pubkey& _internal_mint() const;
  ::basic::Pubkey* _internal_mutable_mint();
  public:
  void unsafe_arena_set_allocated_mint(
      ::basic::Pubkey* mint);
  ::basic::Pubkey* unsafe_arena_release_mint();

  // .basic.Keypair owner_account = 2;
  bool has_owner_account() const;
  private:
  bool _internal_has_owner_account() const;
  public:
  void clear_owner_account();
  const ::basic::Keypair& owner_account() const;
  PROTOBUF_NODISCARD ::basic::Keypair* release_owner_account();
  ::basic::Keypair* mutable_owner_account();
  void set_allocated_owner_account(::basic::Keypair* owner_account);
  private:
  const ::basic::Keypair& _internal_owner_account() const;
  ::basic::Keypair* _internal_mutable_owner_account();
  public:
  void unsafe_arena_set_allocated_owner_account(
      ::basic::Keypair* owner_account);
  ::basic::Keypair* unsafe_arena_release_owner_account();

  // @@protoc_insertion_point(class_scope:solana.InitializeTokenAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::basic::Pubkey* mint_;
  ::basic::Keypair* owner_account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fsolana_2eproto;
};
// -------------------------------------------------------------------

class Mint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:solana.Mint) */ {
 public:
  inline Mint() : Mint(nullptr) {}
  ~Mint() override;
  explicit constexpr Mint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mint(const Mint& from);
  Mint(Mint&& from) noexcept
    : Mint() {
    *this = ::std::move(from);
  }

  inline Mint& operator=(const Mint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mint& operator=(Mint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mint& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mint* internal_default_instance() {
    return reinterpret_cast<const Mint*>(
               &_Mint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Mint& a, Mint& b) {
    a.Swap(&b);
  }
  inline void Swap(Mint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Mint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Mint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "solana.Mint";
  }
  protected:
  explicit Mint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayerFieldNumber = 1,
    kSignerFieldNumber = 2,
    kMintFieldNumber = 3,
    kRecipientFieldNumber = 4,
    kQuantityFieldNumber = 5,
  };
  // .basic.Keypair payer = 1;
  bool has_payer() const;
  private:
  bool _internal_has_payer() const;
  public:
  void clear_payer();
  const ::basic::Keypair& payer() const;
  PROTOBUF_NODISCARD ::basic::Keypair* release_payer();
  ::basic::Keypair* mutable_payer();
  void set_allocated_payer(::basic::Keypair* payer);
  private:
  const ::basic::Keypair& _internal_payer() const;
  ::basic::Keypair* _internal_mutable_payer();
  public:
  void unsafe_arena_set_allocated_payer(
      ::basic::Keypair* payer);
  ::basic::Keypair* unsafe_arena_release_payer();

  // .basic.Keypair signer = 2;
  bool has_signer() const;
  private:
  bool _internal_has_signer() const;
  public:
  void clear_signer();
  const ::basic::Keypair& signer() const;
  PROTOBUF_NODISCARD ::basic::Keypair* release_signer();
  ::basic::Keypair* mutable_signer();
  void set_allocated_signer(::basic::Keypair* signer);
  private:
  const ::basic::Keypair& _internal_signer() const;
  ::basic::Keypair* _internal_mutable_signer();
  public:
  void unsafe_arena_set_allocated_signer(
      ::basic::Keypair* signer);
  ::basic::Keypair* unsafe_arena_release_signer();

  // .basic.Pubkey mint = 3;
  bool has_mint() const;
  private:
  bool _internal_has_mint() const;
  public:
  void clear_mint();
  const ::basic::Pubkey& mint() const;
  PROTOBUF_NODISCARD ::basic::Pubkey* release_mint();
  ::basic::Pubkey* mutable_mint();
  void set_allocated_mint(::basic::Pubkey* mint);
  private:
  const ::basic::Pubkey& _internal_mint() const;
  ::basic::Pubkey* _internal_mutable_mint();
  public:
  void unsafe_arena_set_allocated_mint(
      ::basic::Pubkey* mint);
  ::basic::Pubkey* unsafe_arena_release_mint();

  // .basic.Pubkey recipient = 4;
  bool has_recipient() const;
  private:
  bool _internal_has_recipient() const;
  public:
  void clear_recipient();
  const ::basic::Pubkey& recipient() const;
  PROTOBUF_NODISCARD ::basic::Pubkey* release_recipient();
  ::basic::Pubkey* mutable_recipient();
  void set_allocated_recipient(::basic::Pubkey* recipient);
  private:
  const ::basic::Pubkey& _internal_recipient() const;
  ::basic::Pubkey* _internal_mutable_recipient();
  public:
  void unsafe_arena_set_allocated_recipient(
      ::basic::Pubkey* recipient);
  ::basic::Pubkey* unsafe_arena_release_recipient();

  // uint64 quantity = 5;
  void clear_quantity();
  uint64_t quantity() const;
  void set_quantity(uint64_t value);
  private:
  uint64_t _internal_quantity() const;
  void _internal_set_quantity(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:solana.Mint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::basic::Keypair* payer_;
  ::basic::Keypair* signer_;
  ::basic::Pubkey* mint_;
  ::basic::Pubkey* recipient_;
  uint64_t quantity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fsolana_2eproto;
};
// -------------------------------------------------------------------

class CreateAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:solana.CreateAccount) */ {
 public:
  inline CreateAccount() : CreateAccount(nullptr) {}
  ~CreateAccount() override;
  explicit constexpr CreateAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateAccount(const CreateAccount& from);
  CreateAccount(CreateAccount&& from) noexcept
    : CreateAccount() {
    *this = ::std::move(from);
  }

  inline CreateAccount& operator=(const CreateAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAccount& operator=(CreateAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAccount* internal_default_instance() {
    return reinterpret_cast<const CreateAccount*>(
               &_CreateAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateAccount& a, CreateAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAccount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateAccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateAccount& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "solana.CreateAccount";
  }
  protected:
  explicit CreateAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMintFieldNumber = 1,
    kOwnerFieldNumber = 2,
    kPayerFieldNumber = 3,
  };
  // .basic.Pubkey mint = 1;
  bool has_mint() const;
  private:
  bool _internal_has_mint() const;
  public:
  void clear_mint();
  const ::basic::Pubkey& mint() const;
  PROTOBUF_NODISCARD ::basic::Pubkey* release_mint();
  ::basic::Pubkey* mutable_mint();
  void set_allocated_mint(::basic::Pubkey* mint);
  private:
  const ::basic::Pubkey& _internal_mint() const;
  ::basic::Pubkey* _internal_mutable_mint();
  public:
  void unsafe_arena_set_allocated_mint(
      ::basic::Pubkey* mint);
  ::basic::Pubkey* unsafe_arena_release_mint();

  // .basic.Pubkey owner = 2;
  bool has_owner() const;
  private:
  bool _internal_has_owner() const;
  public:
  void clear_owner();
  const ::basic::Pubkey& owner() const;
  PROTOBUF_NODISCARD ::basic::Pubkey* release_owner();
  ::basic::Pubkey* mutable_owner();
  void set_allocated_owner(::basic::Pubkey* owner);
  private:
  const ::basic::Pubkey& _internal_owner() const;
  ::basic::Pubkey* _internal_mutable_owner();
  public:
  void unsafe_arena_set_allocated_owner(
      ::basic::Pubkey* owner);
  ::basic::Pubkey* unsafe_arena_release_owner();

  // .basic.Keypair payer = 3;
  bool has_payer() const;
  private:
  bool _internal_has_payer() const;
  public:
  void clear_payer();
  const ::basic::Keypair& payer() const;
  PROTOBUF_NODISCARD ::basic::Keypair* release_payer();
  ::basic::Keypair* mutable_payer();
  void set_allocated_payer(::basic::Keypair* payer);
  private:
  const ::basic::Keypair& _internal_payer() const;
  ::basic::Keypair* _internal_mutable_payer();
  public:
  void unsafe_arena_set_allocated_payer(
      ::basic::Keypair* payer);
  ::basic::Keypair* unsafe_arena_release_payer();

  // @@protoc_insertion_point(class_scope:solana.CreateAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::basic::Pubkey* mint_;
  ::basic::Pubkey* owner_;
  ::basic::Keypair* payer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fsolana_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SendBatchRequest

// repeated bytes tx = 1;
inline int SendBatchRequest::_internal_tx_size() const {
  return tx_.size();
}
inline int SendBatchRequest::tx_size() const {
  return _internal_tx_size();
}
inline void SendBatchRequest::clear_tx() {
  tx_.Clear();
}
inline std::string* SendBatchRequest::add_tx() {
  std::string* _s = _internal_add_tx();
  // @@protoc_insertion_point(field_add_mutable:solana.SendBatchRequest.tx)
  return _s;
}
inline const std::string& SendBatchRequest::_internal_tx(int index) const {
  return tx_.Get(index);
}
inline const std::string& SendBatchRequest::tx(int index) const {
  // @@protoc_insertion_point(field_get:solana.SendBatchRequest.tx)
  return _internal_tx(index);
}
inline std::string* SendBatchRequest::mutable_tx(int index) {
  // @@protoc_insertion_point(field_mutable:solana.SendBatchRequest.tx)
  return tx_.Mutable(index);
}
inline void SendBatchRequest::set_tx(int index, const std::string& value) {
  tx_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:solana.SendBatchRequest.tx)
}
inline void SendBatchRequest::set_tx(int index, std::string&& value) {
  tx_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:solana.SendBatchRequest.tx)
}
inline void SendBatchRequest::set_tx(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tx_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:solana.SendBatchRequest.tx)
}
inline void SendBatchRequest::set_tx(int index, const void* value, size_t size) {
  tx_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:solana.SendBatchRequest.tx)
}
inline std::string* SendBatchRequest::_internal_add_tx() {
  return tx_.Add();
}
inline void SendBatchRequest::add_tx(const std::string& value) {
  tx_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:solana.SendBatchRequest.tx)
}
inline void SendBatchRequest::add_tx(std::string&& value) {
  tx_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:solana.SendBatchRequest.tx)
}
inline void SendBatchRequest::add_tx(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tx_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:solana.SendBatchRequest.tx)
}
inline void SendBatchRequest::add_tx(const void* value, size_t size) {
  tx_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:solana.SendBatchRequest.tx)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SendBatchRequest::tx() const {
  // @@protoc_insertion_point(field_list:solana.SendBatchRequest.tx)
  return tx_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SendBatchRequest::mutable_tx() {
  // @@protoc_insertion_point(field_mutable_list:solana.SendBatchRequest.tx)
  return &tx_;
}

// .solana.ConfirmationLevel confirmation_level = 2;
inline void SendBatchRequest::clear_confirmation_level() {
  confirmation_level_ = 0;
}
inline ::solana::ConfirmationLevel SendBatchRequest::_internal_confirmation_level() const {
  return static_cast< ::solana::ConfirmationLevel >(confirmation_level_);
}
inline ::solana::ConfirmationLevel SendBatchRequest::confirmation_level() const {
  // @@protoc_insertion_point(field_get:solana.SendBatchRequest.confirmation_level)
  return _internal_confirmation_level();
}
inline void SendBatchRequest::_internal_set_confirmation_level(::solana::ConfirmationLevel value) {
  
  confirmation_level_ = value;
}
inline void SendBatchRequest::set_confirmation_level(::solana::ConfirmationLevel value) {
  _internal_set_confirmation_level(value);
  // @@protoc_insertion_point(field_set:solana.SendBatchRequest.confirmation_level)
}

// -------------------------------------------------------------------

// SendBatchResponse

// repeated bytes signature = 1;
inline int SendBatchResponse::_internal_signature_size() const {
  return signature_.size();
}
inline int SendBatchResponse::signature_size() const {
  return _internal_signature_size();
}
inline void SendBatchResponse::clear_signature() {
  signature_.Clear();
}
inline std::string* SendBatchResponse::add_signature() {
  std::string* _s = _internal_add_signature();
  // @@protoc_insertion_point(field_add_mutable:solana.SendBatchResponse.signature)
  return _s;
}
inline const std::string& SendBatchResponse::_internal_signature(int index) const {
  return signature_.Get(index);
}
inline const std::string& SendBatchResponse::signature(int index) const {
  // @@protoc_insertion_point(field_get:solana.SendBatchResponse.signature)
  return _internal_signature(index);
}
inline std::string* SendBatchResponse::mutable_signature(int index) {
  // @@protoc_insertion_point(field_mutable:solana.SendBatchResponse.signature)
  return signature_.Mutable(index);
}
inline void SendBatchResponse::set_signature(int index, const std::string& value) {
  signature_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:solana.SendBatchResponse.signature)
}
inline void SendBatchResponse::set_signature(int index, std::string&& value) {
  signature_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:solana.SendBatchResponse.signature)
}
inline void SendBatchResponse::set_signature(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signature_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:solana.SendBatchResponse.signature)
}
inline void SendBatchResponse::set_signature(int index, const void* value, size_t size) {
  signature_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:solana.SendBatchResponse.signature)
}
inline std::string* SendBatchResponse::_internal_add_signature() {
  return signature_.Add();
}
inline void SendBatchResponse::add_signature(const std::string& value) {
  signature_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:solana.SendBatchResponse.signature)
}
inline void SendBatchResponse::add_signature(std::string&& value) {
  signature_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:solana.SendBatchResponse.signature)
}
inline void SendBatchResponse::add_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signature_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:solana.SendBatchResponse.signature)
}
inline void SendBatchResponse::add_signature(const void* value, size_t size) {
  signature_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:solana.SendBatchResponse.signature)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SendBatchResponse::signature() const {
  // @@protoc_insertion_point(field_list:solana.SendBatchResponse.signature)
  return signature_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SendBatchResponse::mutable_signature() {
  // @@protoc_insertion_point(field_mutable_list:solana.SendBatchResponse.signature)
  return &signature_;
}

// -------------------------------------------------------------------

// Genesis

// .basic.Keypair payer = 1;
inline bool Genesis::_internal_has_payer() const {
  return this != internal_default_instance() && payer_ != nullptr;
}
inline bool Genesis::has_payer() const {
  return _internal_has_payer();
}
inline const ::basic::Keypair& Genesis::_internal_payer() const {
  const ::basic::Keypair* p = payer_;
  return p != nullptr ? *p : reinterpret_cast<const ::basic::Keypair&>(
      ::basic::_Keypair_default_instance_);
}
inline const ::basic::Keypair& Genesis::payer() const {
  // @@protoc_insertion_point(field_get:solana.Genesis.payer)
  return _internal_payer();
}
inline void Genesis::unsafe_arena_set_allocated_payer(
    ::basic::Keypair* payer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payer_);
  }
  payer_ = payer;
  if (payer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solana.Genesis.payer)
}
inline ::basic::Keypair* Genesis::release_payer() {
  
  ::basic::Keypair* temp = payer_;
  payer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::basic::Keypair* Genesis::unsafe_arena_release_payer() {
  // @@protoc_insertion_point(field_release:solana.Genesis.payer)
  
  ::basic::Keypair* temp = payer_;
  payer_ = nullptr;
  return temp;
}
inline ::basic::Keypair* Genesis::_internal_mutable_payer() {
  
  if (payer_ == nullptr) {
    auto* p = CreateMaybeMessage<::basic::Keypair>(GetArenaForAllocation());
    payer_ = p;
  }
  return payer_;
}
inline ::basic::Keypair* Genesis::mutable_payer() {
  ::basic::Keypair* _msg = _internal_mutable_payer();
  // @@protoc_insertion_point(field_mutable:solana.Genesis.payer)
  return _msg;
}
inline void Genesis::set_allocated_payer(::basic::Keypair* payer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(payer_);
  }
  if (payer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payer));
    if (message_arena != submessage_arena) {
      payer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payer, submessage_arena);
    }
    
  } else {
    
  }
  payer_ = payer;
  // @@protoc_insertion_point(field_set_allocated:solana.Genesis.payer)
}

// .basic.Keypair mint = 2;
inline bool Genesis::_internal_has_mint() const {
  return this != internal_default_instance() && mint_ != nullptr;
}
inline bool Genesis::has_mint() const {
  return _internal_has_mint();
}
inline const ::basic::Keypair& Genesis::_internal_mint() const {
  const ::basic::Keypair* p = mint_;
  return p != nullptr ? *p : reinterpret_cast<const ::basic::Keypair&>(
      ::basic::_Keypair_default_instance_);
}
inline const ::basic::Keypair& Genesis::mint() const {
  // @@protoc_insertion_point(field_get:solana.Genesis.mint)
  return _internal_mint();
}
inline void Genesis::unsafe_arena_set_allocated_mint(
    ::basic::Keypair* mint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mint_);
  }
  mint_ = mint;
  if (mint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solana.Genesis.mint)
}
inline ::basic::Keypair* Genesis::release_mint() {
  
  ::basic::Keypair* temp = mint_;
  mint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::basic::Keypair* Genesis::unsafe_arena_release_mint() {
  // @@protoc_insertion_point(field_release:solana.Genesis.mint)
  
  ::basic::Keypair* temp = mint_;
  mint_ = nullptr;
  return temp;
}
inline ::basic::Keypair* Genesis::_internal_mutable_mint() {
  
  if (mint_ == nullptr) {
    auto* p = CreateMaybeMessage<::basic::Keypair>(GetArenaForAllocation());
    mint_ = p;
  }
  return mint_;
}
inline ::basic::Keypair* Genesis::mutable_mint() {
  ::basic::Keypair* _msg = _internal_mutable_mint();
  // @@protoc_insertion_point(field_mutable:solana.Genesis.mint)
  return _msg;
}
inline void Genesis::set_allocated_mint(::basic::Keypair* mint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mint_);
  }
  if (mint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mint));
    if (message_arena != submessage_arena) {
      mint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mint, submessage_arena);
    }
    
  } else {
    
  }
  mint_ = mint;
  // @@protoc_insertion_point(field_set_allocated:solana.Genesis.mint)
}

// .basic.Pubkey owner = 3;
inline bool Genesis::_internal_has_owner() const {
  return this != internal_default_instance() && owner_ != nullptr;
}
inline bool Genesis::has_owner() const {
  return _internal_has_owner();
}
inline const ::basic::Pubkey& Genesis::_internal_owner() const {
  const ::basic::Pubkey* p = owner_;
  return p != nullptr ? *p : reinterpret_cast<const ::basic::Pubkey&>(
      ::basic::_Pubkey_default_instance_);
}
inline const ::basic::Pubkey& Genesis::owner() const {
  // @@protoc_insertion_point(field_get:solana.Genesis.owner)
  return _internal_owner();
}
inline void Genesis::unsafe_arena_set_allocated_owner(
    ::basic::Pubkey* owner) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_);
  }
  owner_ = owner;
  if (owner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solana.Genesis.owner)
}
inline ::basic::Pubkey* Genesis::release_owner() {
  
  ::basic::Pubkey* temp = owner_;
  owner_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::basic::Pubkey* Genesis::unsafe_arena_release_owner() {
  // @@protoc_insertion_point(field_release:solana.Genesis.owner)
  
  ::basic::Pubkey* temp = owner_;
  owner_ = nullptr;
  return temp;
}
inline ::basic::Pubkey* Genesis::_internal_mutable_owner() {
  
  if (owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::basic::Pubkey>(GetArenaForAllocation());
    owner_ = p;
  }
  return owner_;
}
inline ::basic::Pubkey* Genesis::mutable_owner() {
  ::basic::Pubkey* _msg = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:solana.Genesis.owner)
  return _msg;
}
inline void Genesis::set_allocated_owner(::basic::Pubkey* owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_);
  }
  if (owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner));
    if (message_arena != submessage_arena) {
      owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    
  } else {
    
  }
  owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:solana.Genesis.owner)
}

// bytes decimals = 4;
inline void Genesis::clear_decimals() {
  decimals_.ClearToEmpty();
}
inline const std::string& Genesis::decimals() const {
  // @@protoc_insertion_point(field_get:solana.Genesis.decimals)
  return _internal_decimals();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Genesis::set_decimals(ArgT0&& arg0, ArgT... args) {
 
 decimals_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:solana.Genesis.decimals)
}
inline std::string* Genesis::mutable_decimals() {
  std::string* _s = _internal_mutable_decimals();
  // @@protoc_insertion_point(field_mutable:solana.Genesis.decimals)
  return _s;
}
inline const std::string& Genesis::_internal_decimals() const {
  return decimals_.Get();
}
inline void Genesis::_internal_set_decimals(const std::string& value) {
  
  decimals_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Genesis::_internal_mutable_decimals() {
  
  return decimals_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Genesis::release_decimals() {
  // @@protoc_insertion_point(field_release:solana.Genesis.decimals)
  return decimals_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Genesis::set_allocated_decimals(std::string* decimals) {
  if (decimals != nullptr) {
    
  } else {
    
  }
  decimals_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), decimals,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (decimals_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    decimals_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:solana.Genesis.decimals)
}

// -------------------------------------------------------------------

// InitializeTokenAccount

// .basic.Pubkey mint = 1;
inline bool InitializeTokenAccount::_internal_has_mint() const {
  return this != internal_default_instance() && mint_ != nullptr;
}
inline bool InitializeTokenAccount::has_mint() const {
  return _internal_has_mint();
}
inline const ::basic::Pubkey& InitializeTokenAccount::_internal_mint() const {
  const ::basic::Pubkey* p = mint_;
  return p != nullptr ? *p : reinterpret_cast<const ::basic::Pubkey&>(
      ::basic::_Pubkey_default_instance_);
}
inline const ::basic::Pubkey& InitializeTokenAccount::mint() const {
  // @@protoc_insertion_point(field_get:solana.InitializeTokenAccount.mint)
  return _internal_mint();
}
inline void InitializeTokenAccount::unsafe_arena_set_allocated_mint(
    ::basic::Pubkey* mint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mint_);
  }
  mint_ = mint;
  if (mint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solana.InitializeTokenAccount.mint)
}
inline ::basic::Pubkey* InitializeTokenAccount::release_mint() {
  
  ::basic::Pubkey* temp = mint_;
  mint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::basic::Pubkey* InitializeTokenAccount::unsafe_arena_release_mint() {
  // @@protoc_insertion_point(field_release:solana.InitializeTokenAccount.mint)
  
  ::basic::Pubkey* temp = mint_;
  mint_ = nullptr;
  return temp;
}
inline ::basic::Pubkey* InitializeTokenAccount::_internal_mutable_mint() {
  
  if (mint_ == nullptr) {
    auto* p = CreateMaybeMessage<::basic::Pubkey>(GetArenaForAllocation());
    mint_ = p;
  }
  return mint_;
}
inline ::basic::Pubkey* InitializeTokenAccount::mutable_mint() {
  ::basic::Pubkey* _msg = _internal_mutable_mint();
  // @@protoc_insertion_point(field_mutable:solana.InitializeTokenAccount.mint)
  return _msg;
}
inline void InitializeTokenAccount::set_allocated_mint(::basic::Pubkey* mint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mint_);
  }
  if (mint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mint));
    if (message_arena != submessage_arena) {
      mint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mint, submessage_arena);
    }
    
  } else {
    
  }
  mint_ = mint;
  // @@protoc_insertion_point(field_set_allocated:solana.InitializeTokenAccount.mint)
}

// .basic.Keypair owner_account = 2;
inline bool InitializeTokenAccount::_internal_has_owner_account() const {
  return this != internal_default_instance() && owner_account_ != nullptr;
}
inline bool InitializeTokenAccount::has_owner_account() const {
  return _internal_has_owner_account();
}
inline const ::basic::Keypair& InitializeTokenAccount::_internal_owner_account() const {
  const ::basic::Keypair* p = owner_account_;
  return p != nullptr ? *p : reinterpret_cast<const ::basic::Keypair&>(
      ::basic::_Keypair_default_instance_);
}
inline const ::basic::Keypair& InitializeTokenAccount::owner_account() const {
  // @@protoc_insertion_point(field_get:solana.InitializeTokenAccount.owner_account)
  return _internal_owner_account();
}
inline void InitializeTokenAccount::unsafe_arena_set_allocated_owner_account(
    ::basic::Keypair* owner_account) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_account_);
  }
  owner_account_ = owner_account;
  if (owner_account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solana.InitializeTokenAccount.owner_account)
}
inline ::basic::Keypair* InitializeTokenAccount::release_owner_account() {
  
  ::basic::Keypair* temp = owner_account_;
  owner_account_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::basic::Keypair* InitializeTokenAccount::unsafe_arena_release_owner_account() {
  // @@protoc_insertion_point(field_release:solana.InitializeTokenAccount.owner_account)
  
  ::basic::Keypair* temp = owner_account_;
  owner_account_ = nullptr;
  return temp;
}
inline ::basic::Keypair* InitializeTokenAccount::_internal_mutable_owner_account() {
  
  if (owner_account_ == nullptr) {
    auto* p = CreateMaybeMessage<::basic::Keypair>(GetArenaForAllocation());
    owner_account_ = p;
  }
  return owner_account_;
}
inline ::basic::Keypair* InitializeTokenAccount::mutable_owner_account() {
  ::basic::Keypair* _msg = _internal_mutable_owner_account();
  // @@protoc_insertion_point(field_mutable:solana.InitializeTokenAccount.owner_account)
  return _msg;
}
inline void InitializeTokenAccount::set_allocated_owner_account(::basic::Keypair* owner_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_account_);
  }
  if (owner_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_account));
    if (message_arena != submessage_arena) {
      owner_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner_account, submessage_arena);
    }
    
  } else {
    
  }
  owner_account_ = owner_account;
  // @@protoc_insertion_point(field_set_allocated:solana.InitializeTokenAccount.owner_account)
}

// -------------------------------------------------------------------

// Mint

// .basic.Keypair payer = 1;
inline bool Mint::_internal_has_payer() const {
  return this != internal_default_instance() && payer_ != nullptr;
}
inline bool Mint::has_payer() const {
  return _internal_has_payer();
}
inline const ::basic::Keypair& Mint::_internal_payer() const {
  const ::basic::Keypair* p = payer_;
  return p != nullptr ? *p : reinterpret_cast<const ::basic::Keypair&>(
      ::basic::_Keypair_default_instance_);
}
inline const ::basic::Keypair& Mint::payer() const {
  // @@protoc_insertion_point(field_get:solana.Mint.payer)
  return _internal_payer();
}
inline void Mint::unsafe_arena_set_allocated_payer(
    ::basic::Keypair* payer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payer_);
  }
  payer_ = payer;
  if (payer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solana.Mint.payer)
}
inline ::basic::Keypair* Mint::release_payer() {
  
  ::basic::Keypair* temp = payer_;
  payer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::basic::Keypair* Mint::unsafe_arena_release_payer() {
  // @@protoc_insertion_point(field_release:solana.Mint.payer)
  
  ::basic::Keypair* temp = payer_;
  payer_ = nullptr;
  return temp;
}
inline ::basic::Keypair* Mint::_internal_mutable_payer() {
  
  if (payer_ == nullptr) {
    auto* p = CreateMaybeMessage<::basic::Keypair>(GetArenaForAllocation());
    payer_ = p;
  }
  return payer_;
}
inline ::basic::Keypair* Mint::mutable_payer() {
  ::basic::Keypair* _msg = _internal_mutable_payer();
  // @@protoc_insertion_point(field_mutable:solana.Mint.payer)
  return _msg;
}
inline void Mint::set_allocated_payer(::basic::Keypair* payer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(payer_);
  }
  if (payer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payer));
    if (message_arena != submessage_arena) {
      payer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payer, submessage_arena);
    }
    
  } else {
    
  }
  payer_ = payer;
  // @@protoc_insertion_point(field_set_allocated:solana.Mint.payer)
}

// .basic.Keypair signer = 2;
inline bool Mint::_internal_has_signer() const {
  return this != internal_default_instance() && signer_ != nullptr;
}
inline bool Mint::has_signer() const {
  return _internal_has_signer();
}
inline const ::basic::Keypair& Mint::_internal_signer() const {
  const ::basic::Keypair* p = signer_;
  return p != nullptr ? *p : reinterpret_cast<const ::basic::Keypair&>(
      ::basic::_Keypair_default_instance_);
}
inline const ::basic::Keypair& Mint::signer() const {
  // @@protoc_insertion_point(field_get:solana.Mint.signer)
  return _internal_signer();
}
inline void Mint::unsafe_arena_set_allocated_signer(
    ::basic::Keypair* signer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signer_);
  }
  signer_ = signer;
  if (signer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solana.Mint.signer)
}
inline ::basic::Keypair* Mint::release_signer() {
  
  ::basic::Keypair* temp = signer_;
  signer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::basic::Keypair* Mint::unsafe_arena_release_signer() {
  // @@protoc_insertion_point(field_release:solana.Mint.signer)
  
  ::basic::Keypair* temp = signer_;
  signer_ = nullptr;
  return temp;
}
inline ::basic::Keypair* Mint::_internal_mutable_signer() {
  
  if (signer_ == nullptr) {
    auto* p = CreateMaybeMessage<::basic::Keypair>(GetArenaForAllocation());
    signer_ = p;
  }
  return signer_;
}
inline ::basic::Keypair* Mint::mutable_signer() {
  ::basic::Keypair* _msg = _internal_mutable_signer();
  // @@protoc_insertion_point(field_mutable:solana.Mint.signer)
  return _msg;
}
inline void Mint::set_allocated_signer(::basic::Keypair* signer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(signer_);
  }
  if (signer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signer));
    if (message_arena != submessage_arena) {
      signer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signer, submessage_arena);
    }
    
  } else {
    
  }
  signer_ = signer;
  // @@protoc_insertion_point(field_set_allocated:solana.Mint.signer)
}

// .basic.Pubkey mint = 3;
inline bool Mint::_internal_has_mint() const {
  return this != internal_default_instance() && mint_ != nullptr;
}
inline bool Mint::has_mint() const {
  return _internal_has_mint();
}
inline const ::basic::Pubkey& Mint::_internal_mint() const {
  const ::basic::Pubkey* p = mint_;
  return p != nullptr ? *p : reinterpret_cast<const ::basic::Pubkey&>(
      ::basic::_Pubkey_default_instance_);
}
inline const ::basic::Pubkey& Mint::mint() const {
  // @@protoc_insertion_point(field_get:solana.Mint.mint)
  return _internal_mint();
}
inline void Mint::unsafe_arena_set_allocated_mint(
    ::basic::Pubkey* mint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mint_);
  }
  mint_ = mint;
  if (mint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solana.Mint.mint)
}
inline ::basic::Pubkey* Mint::release_mint() {
  
  ::basic::Pubkey* temp = mint_;
  mint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::basic::Pubkey* Mint::unsafe_arena_release_mint() {
  // @@protoc_insertion_point(field_release:solana.Mint.mint)
  
  ::basic::Pubkey* temp = mint_;
  mint_ = nullptr;
  return temp;
}
inline ::basic::Pubkey* Mint::_internal_mutable_mint() {
  
  if (mint_ == nullptr) {
    auto* p = CreateMaybeMessage<::basic::Pubkey>(GetArenaForAllocation());
    mint_ = p;
  }
  return mint_;
}
inline ::basic::Pubkey* Mint::mutable_mint() {
  ::basic::Pubkey* _msg = _internal_mutable_mint();
  // @@protoc_insertion_point(field_mutable:solana.Mint.mint)
  return _msg;
}
inline void Mint::set_allocated_mint(::basic::Pubkey* mint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mint_);
  }
  if (mint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mint));
    if (message_arena != submessage_arena) {
      mint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mint, submessage_arena);
    }
    
  } else {
    
  }
  mint_ = mint;
  // @@protoc_insertion_point(field_set_allocated:solana.Mint.mint)
}

// .basic.Pubkey recipient = 4;
inline bool Mint::_internal_has_recipient() const {
  return this != internal_default_instance() && recipient_ != nullptr;
}
inline bool Mint::has_recipient() const {
  return _internal_has_recipient();
}
inline const ::basic::Pubkey& Mint::_internal_recipient() const {
  const ::basic::Pubkey* p = recipient_;
  return p != nullptr ? *p : reinterpret_cast<const ::basic::Pubkey&>(
      ::basic::_Pubkey_default_instance_);
}
inline const ::basic::Pubkey& Mint::recipient() const {
  // @@protoc_insertion_point(field_get:solana.Mint.recipient)
  return _internal_recipient();
}
inline void Mint::unsafe_arena_set_allocated_recipient(
    ::basic::Pubkey* recipient) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recipient_);
  }
  recipient_ = recipient;
  if (recipient) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solana.Mint.recipient)
}
inline ::basic::Pubkey* Mint::release_recipient() {
  
  ::basic::Pubkey* temp = recipient_;
  recipient_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::basic::Pubkey* Mint::unsafe_arena_release_recipient() {
  // @@protoc_insertion_point(field_release:solana.Mint.recipient)
  
  ::basic::Pubkey* temp = recipient_;
  recipient_ = nullptr;
  return temp;
}
inline ::basic::Pubkey* Mint::_internal_mutable_recipient() {
  
  if (recipient_ == nullptr) {
    auto* p = CreateMaybeMessage<::basic::Pubkey>(GetArenaForAllocation());
    recipient_ = p;
  }
  return recipient_;
}
inline ::basic::Pubkey* Mint::mutable_recipient() {
  ::basic::Pubkey* _msg = _internal_mutable_recipient();
  // @@protoc_insertion_point(field_mutable:solana.Mint.recipient)
  return _msg;
}
inline void Mint::set_allocated_recipient(::basic::Pubkey* recipient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(recipient_);
  }
  if (recipient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recipient));
    if (message_arena != submessage_arena) {
      recipient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recipient, submessage_arena);
    }
    
  } else {
    
  }
  recipient_ = recipient;
  // @@protoc_insertion_point(field_set_allocated:solana.Mint.recipient)
}

// uint64 quantity = 5;
inline void Mint::clear_quantity() {
  quantity_ = uint64_t{0u};
}
inline uint64_t Mint::_internal_quantity() const {
  return quantity_;
}
inline uint64_t Mint::quantity() const {
  // @@protoc_insertion_point(field_get:solana.Mint.quantity)
  return _internal_quantity();
}
inline void Mint::_internal_set_quantity(uint64_t value) {
  
  quantity_ = value;
}
inline void Mint::set_quantity(uint64_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:solana.Mint.quantity)
}

// -------------------------------------------------------------------

// CreateAccount

// .basic.Pubkey mint = 1;
inline bool CreateAccount::_internal_has_mint() const {
  return this != internal_default_instance() && mint_ != nullptr;
}
inline bool CreateAccount::has_mint() const {
  return _internal_has_mint();
}
inline const ::basic::Pubkey& CreateAccount::_internal_mint() const {
  const ::basic::Pubkey* p = mint_;
  return p != nullptr ? *p : reinterpret_cast<const ::basic::Pubkey&>(
      ::basic::_Pubkey_default_instance_);
}
inline const ::basic::Pubkey& CreateAccount::mint() const {
  // @@protoc_insertion_point(field_get:solana.CreateAccount.mint)
  return _internal_mint();
}
inline void CreateAccount::unsafe_arena_set_allocated_mint(
    ::basic::Pubkey* mint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mint_);
  }
  mint_ = mint;
  if (mint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solana.CreateAccount.mint)
}
inline ::basic::Pubkey* CreateAccount::release_mint() {
  
  ::basic::Pubkey* temp = mint_;
  mint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::basic::Pubkey* CreateAccount::unsafe_arena_release_mint() {
  // @@protoc_insertion_point(field_release:solana.CreateAccount.mint)
  
  ::basic::Pubkey* temp = mint_;
  mint_ = nullptr;
  return temp;
}
inline ::basic::Pubkey* CreateAccount::_internal_mutable_mint() {
  
  if (mint_ == nullptr) {
    auto* p = CreateMaybeMessage<::basic::Pubkey>(GetArenaForAllocation());
    mint_ = p;
  }
  return mint_;
}
inline ::basic::Pubkey* CreateAccount::mutable_mint() {
  ::basic::Pubkey* _msg = _internal_mutable_mint();
  // @@protoc_insertion_point(field_mutable:solana.CreateAccount.mint)
  return _msg;
}
inline void CreateAccount::set_allocated_mint(::basic::Pubkey* mint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mint_);
  }
  if (mint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mint));
    if (message_arena != submessage_arena) {
      mint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mint, submessage_arena);
    }
    
  } else {
    
  }
  mint_ = mint;
  // @@protoc_insertion_point(field_set_allocated:solana.CreateAccount.mint)
}

// .basic.Pubkey owner = 2;
inline bool CreateAccount::_internal_has_owner() const {
  return this != internal_default_instance() && owner_ != nullptr;
}
inline bool CreateAccount::has_owner() const {
  return _internal_has_owner();
}
inline const ::basic::Pubkey& CreateAccount::_internal_owner() const {
  const ::basic::Pubkey* p = owner_;
  return p != nullptr ? *p : reinterpret_cast<const ::basic::Pubkey&>(
      ::basic::_Pubkey_default_instance_);
}
inline const ::basic::Pubkey& CreateAccount::owner() const {
  // @@protoc_insertion_point(field_get:solana.CreateAccount.owner)
  return _internal_owner();
}
inline void CreateAccount::unsafe_arena_set_allocated_owner(
    ::basic::Pubkey* owner) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_);
  }
  owner_ = owner;
  if (owner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solana.CreateAccount.owner)
}
inline ::basic::Pubkey* CreateAccount::release_owner() {
  
  ::basic::Pubkey* temp = owner_;
  owner_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::basic::Pubkey* CreateAccount::unsafe_arena_release_owner() {
  // @@protoc_insertion_point(field_release:solana.CreateAccount.owner)
  
  ::basic::Pubkey* temp = owner_;
  owner_ = nullptr;
  return temp;
}
inline ::basic::Pubkey* CreateAccount::_internal_mutable_owner() {
  
  if (owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::basic::Pubkey>(GetArenaForAllocation());
    owner_ = p;
  }
  return owner_;
}
inline ::basic::Pubkey* CreateAccount::mutable_owner() {
  ::basic::Pubkey* _msg = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:solana.CreateAccount.owner)
  return _msg;
}
inline void CreateAccount::set_allocated_owner(::basic::Pubkey* owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_);
  }
  if (owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner));
    if (message_arena != submessage_arena) {
      owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    
  } else {
    
  }
  owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:solana.CreateAccount.owner)
}

// .basic.Keypair payer = 3;
inline bool CreateAccount::_internal_has_payer() const {
  return this != internal_default_instance() && payer_ != nullptr;
}
inline bool CreateAccount::has_payer() const {
  return _internal_has_payer();
}
inline const ::basic::Keypair& CreateAccount::_internal_payer() const {
  const ::basic::Keypair* p = payer_;
  return p != nullptr ? *p : reinterpret_cast<const ::basic::Keypair&>(
      ::basic::_Keypair_default_instance_);
}
inline const ::basic::Keypair& CreateAccount::payer() const {
  // @@protoc_insertion_point(field_get:solana.CreateAccount.payer)
  return _internal_payer();
}
inline void CreateAccount::unsafe_arena_set_allocated_payer(
    ::basic::Keypair* payer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payer_);
  }
  payer_ = payer;
  if (payer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:solana.CreateAccount.payer)
}
inline ::basic::Keypair* CreateAccount::release_payer() {
  
  ::basic::Keypair* temp = payer_;
  payer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::basic::Keypair* CreateAccount::unsafe_arena_release_payer() {
  // @@protoc_insertion_point(field_release:solana.CreateAccount.payer)
  
  ::basic::Keypair* temp = payer_;
  payer_ = nullptr;
  return temp;
}
inline ::basic::Keypair* CreateAccount::_internal_mutable_payer() {
  
  if (payer_ == nullptr) {
    auto* p = CreateMaybeMessage<::basic::Keypair>(GetArenaForAllocation());
    payer_ = p;
  }
  return payer_;
}
inline ::basic::Keypair* CreateAccount::mutable_payer() {
  ::basic::Keypair* _msg = _internal_mutable_payer();
  // @@protoc_insertion_point(field_mutable:solana.CreateAccount.payer)
  return _msg;
}
inline void CreateAccount::set_allocated_payer(::basic::Keypair* payer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(payer_);
  }
  if (payer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payer));
    if (message_arena != submessage_arena) {
      payer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payer, submessage_arena);
    }
    
  } else {
    
  }
  payer_ = payer;
  // @@protoc_insertion_point(field_set_allocated:solana.CreateAccount.payer)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace solana

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::solana::ConfirmationLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::solana::ConfirmationLevel>() {
  return ::solana::ConfirmationLevel_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fsolana_2eproto
