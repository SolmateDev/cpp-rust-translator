// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/solana.proto

#include "proto/solana.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace solana {
constexpr SendBatchRequest::SendBatchRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tx_()
  , confirmation_level_(0)
{}
struct SendBatchRequestDefaultTypeInternal {
  constexpr SendBatchRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendBatchRequestDefaultTypeInternal() {}
  union {
    SendBatchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendBatchRequestDefaultTypeInternal _SendBatchRequest_default_instance_;
constexpr SendBatchResponse::SendBatchResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signature_(){}
struct SendBatchResponseDefaultTypeInternal {
  constexpr SendBatchResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendBatchResponseDefaultTypeInternal() {}
  union {
    SendBatchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendBatchResponseDefaultTypeInternal _SendBatchResponse_default_instance_;
constexpr Genesis::Genesis(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : decimals_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , payer_(nullptr)
  , mint_(nullptr)
  , owner_(nullptr){}
struct GenesisDefaultTypeInternal {
  constexpr GenesisDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenesisDefaultTypeInternal() {}
  union {
    Genesis _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenesisDefaultTypeInternal _Genesis_default_instance_;
constexpr InitializeTokenAccount::InitializeTokenAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mint_(nullptr)
  , owner_account_(nullptr){}
struct InitializeTokenAccountDefaultTypeInternal {
  constexpr InitializeTokenAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitializeTokenAccountDefaultTypeInternal() {}
  union {
    InitializeTokenAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitializeTokenAccountDefaultTypeInternal _InitializeTokenAccount_default_instance_;
constexpr Mint::Mint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payer_(nullptr)
  , signer_(nullptr)
  , mint_(nullptr)
  , recipient_(nullptr)
  , quantity_(uint64_t{0u}){}
struct MintDefaultTypeInternal {
  constexpr MintDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MintDefaultTypeInternal() {}
  union {
    Mint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MintDefaultTypeInternal _Mint_default_instance_;
constexpr CreateAccount::CreateAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mint_(nullptr)
  , owner_(nullptr)
  , payer_(nullptr){}
struct CreateAccountDefaultTypeInternal {
  constexpr CreateAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateAccountDefaultTypeInternal() {}
  union {
    CreateAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateAccountDefaultTypeInternal _CreateAccount_default_instance_;
}  // namespace solana
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fsolana_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2fsolana_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fsolana_2eproto = nullptr;

const uint32_t TableStruct_proto_2fsolana_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::solana::SendBatchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::solana::SendBatchRequest, tx_),
  PROTOBUF_FIELD_OFFSET(::solana::SendBatchRequest, confirmation_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::solana::SendBatchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::solana::SendBatchResponse, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::solana::Genesis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::solana::Genesis, payer_),
  PROTOBUF_FIELD_OFFSET(::solana::Genesis, mint_),
  PROTOBUF_FIELD_OFFSET(::solana::Genesis, owner_),
  PROTOBUF_FIELD_OFFSET(::solana::Genesis, decimals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::solana::InitializeTokenAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::solana::InitializeTokenAccount, mint_),
  PROTOBUF_FIELD_OFFSET(::solana::InitializeTokenAccount, owner_account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::solana::Mint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::solana::Mint, payer_),
  PROTOBUF_FIELD_OFFSET(::solana::Mint, signer_),
  PROTOBUF_FIELD_OFFSET(::solana::Mint, mint_),
  PROTOBUF_FIELD_OFFSET(::solana::Mint, recipient_),
  PROTOBUF_FIELD_OFFSET(::solana::Mint, quantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::solana::CreateAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::solana::CreateAccount, mint_),
  PROTOBUF_FIELD_OFFSET(::solana::CreateAccount, owner_),
  PROTOBUF_FIELD_OFFSET(::solana::CreateAccount, payer_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::solana::SendBatchRequest)},
  { 8, -1, -1, sizeof(::solana::SendBatchResponse)},
  { 15, -1, -1, sizeof(::solana::Genesis)},
  { 25, -1, -1, sizeof(::solana::InitializeTokenAccount)},
  { 33, -1, -1, sizeof(::solana::Mint)},
  { 44, -1, -1, sizeof(::solana::CreateAccount)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::solana::_SendBatchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::solana::_SendBatchResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::solana::_Genesis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::solana::_InitializeTokenAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::solana::_Mint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::solana::_CreateAccount_default_instance_),
};

const char descriptor_table_protodef_proto_2fsolana_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022proto/solana.proto\022\006solana\032\021proto/basi"
  "c.proto\"U\n\020SendBatchRequest\022\n\n\002tx\030\001 \003(\014\022"
  "5\n\022confirmation_level\030\002 \001(\0162\031.solana.Con"
  "firmationLevel\"&\n\021SendBatchResponse\022\021\n\ts"
  "ignature\030\001 \003(\014\"v\n\007Genesis\022\035\n\005payer\030\001 \001(\013"
  "2\016.basic.Keypair\022\034\n\004mint\030\002 \001(\0132\016.basic.K"
  "eypair\022\034\n\005owner\030\003 \001(\0132\r.basic.Pubkey\022\020\n\010"
  "decimals\030\004 \001(\014\"\\\n\026InitializeTokenAccount"
  "\022\033\n\004mint\030\001 \001(\0132\r.basic.Pubkey\022%\n\rowner_a"
  "ccount\030\002 \001(\0132\016.basic.Keypair\"\226\001\n\004Mint\022\035\n"
  "\005payer\030\001 \001(\0132\016.basic.Keypair\022\036\n\006signer\030\002"
  " \001(\0132\016.basic.Keypair\022\033\n\004mint\030\003 \001(\0132\r.bas"
  "ic.Pubkey\022 \n\trecipient\030\004 \001(\0132\r.basic.Pub"
  "key\022\020\n\010quantity\030\005 \001(\004\"i\n\rCreateAccount\022\033"
  "\n\004mint\030\001 \001(\0132\r.basic.Pubkey\022\034\n\005owner\030\002 \001"
  "(\0132\r.basic.Pubkey\022\035\n\005payer\030\003 \001(\0132\016.basic"
  ".Keypair*@\n\021ConfirmationLevel\022\r\n\tPROCESS"
  "ED\020\000\022\r\n\tCONFIRMED\020\001\022\r\n\tFINALIZED\020\0022\260\002\n\tB"
  "roadcast\022\?\n\006SendTx\022\030.solana.SendBatchReq"
  "uest\032\031.solana.SendBatchResponse\"\000\022-\n\nRun"
  "Genesis\022\017.solana.Genesis\032\014.basic.Empty\"\000"
  "\022M\n\031RunInitializeTokenAccount\022\036.solana.I"
  "nitializeTokenAccount\032\016.basic.Keypair\"\000\022"
  ";\n\020RunCreateAccount\022\025.solana.CreateAccou"
  "nt\032\016.basic.Keypair\"\000\022\'\n\007RunMint\022\014.solana"
  ".Mint\032\014.basic.Empty\"\000B1Z/github.com/Solm"
  "ateDev/go-rust-translator/solanab\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fsolana_2eproto_deps[1] = {
  &::descriptor_table_proto_2fbasic_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fsolana_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fsolana_2eproto = {
  false, false, 1080, descriptor_table_protodef_proto_2fsolana_2eproto, "proto/solana.proto", 
  &descriptor_table_proto_2fsolana_2eproto_once, descriptor_table_proto_2fsolana_2eproto_deps, 1, 6,
  schemas, file_default_instances, TableStruct_proto_2fsolana_2eproto::offsets,
  file_level_metadata_proto_2fsolana_2eproto, file_level_enum_descriptors_proto_2fsolana_2eproto, file_level_service_descriptors_proto_2fsolana_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_proto_2fsolana_2eproto_getter() {
  return &descriptor_table_proto_2fsolana_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_proto_2fsolana_2eproto(&descriptor_table_proto_2fsolana_2eproto);
namespace solana {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConfirmationLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fsolana_2eproto);
  return file_level_enum_descriptors_proto_2fsolana_2eproto[0];
}
bool ConfirmationLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SendBatchRequest::_Internal {
 public:
};

SendBatchRequest::SendBatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tx_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:solana.SendBatchRequest)
}
SendBatchRequest::SendBatchRequest(const SendBatchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tx_(from.tx_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  confirmation_level_ = from.confirmation_level_;
  // @@protoc_insertion_point(copy_constructor:solana.SendBatchRequest)
}

inline void SendBatchRequest::SharedCtor() {
confirmation_level_ = 0;
}

SendBatchRequest::~SendBatchRequest() {
  // @@protoc_insertion_point(destructor:solana.SendBatchRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SendBatchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SendBatchRequest::ArenaDtor(void* object) {
  SendBatchRequest* _this = reinterpret_cast< SendBatchRequest* >(object);
  (void)_this;
}
void SendBatchRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendBatchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendBatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:solana.SendBatchRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_.Clear();
  confirmation_level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendBatchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes tx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tx();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .solana.ConfirmationLevel confirmation_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_confirmation_level(static_cast<::solana::ConfirmationLevel>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendBatchRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:solana.SendBatchRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes tx = 1;
  for (int i = 0, n = this->_internal_tx_size(); i < n; i++) {
    const auto& s = this->_internal_tx(i);
    target = stream->WriteBytes(1, s, target);
  }

  // .solana.ConfirmationLevel confirmation_level = 2;
  if (this->_internal_confirmation_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_confirmation_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solana.SendBatchRequest)
  return target;
}

size_t SendBatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:solana.SendBatchRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes tx = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tx_.size());
  for (int i = 0, n = tx_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      tx_.Get(i));
  }

  // .solana.ConfirmationLevel confirmation_level = 2;
  if (this->_internal_confirmation_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_confirmation_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendBatchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendBatchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendBatchRequest::GetClassData() const { return &_class_data_; }

void SendBatchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SendBatchRequest *>(to)->MergeFrom(
      static_cast<const SendBatchRequest &>(from));
}


void SendBatchRequest::MergeFrom(const SendBatchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:solana.SendBatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tx_.MergeFrom(from.tx_);
  if (from._internal_confirmation_level() != 0) {
    _internal_set_confirmation_level(from._internal_confirmation_level());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendBatchRequest::CopyFrom(const SendBatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solana.SendBatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendBatchRequest::IsInitialized() const {
  return true;
}

void SendBatchRequest::InternalSwap(SendBatchRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tx_.InternalSwap(&other->tx_);
  swap(confirmation_level_, other->confirmation_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendBatchRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fsolana_2eproto_getter, &descriptor_table_proto_2fsolana_2eproto_once,
      file_level_metadata_proto_2fsolana_2eproto[0]);
}

// ===================================================================

class SendBatchResponse::_Internal {
 public:
};

SendBatchResponse::SendBatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  signature_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:solana.SendBatchResponse)
}
SendBatchResponse::SendBatchResponse(const SendBatchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      signature_(from.signature_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:solana.SendBatchResponse)
}

inline void SendBatchResponse::SharedCtor() {
}

SendBatchResponse::~SendBatchResponse() {
  // @@protoc_insertion_point(destructor:solana.SendBatchResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SendBatchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SendBatchResponse::ArenaDtor(void* object) {
  SendBatchResponse* _this = reinterpret_cast< SendBatchResponse* >(object);
  (void)_this;
}
void SendBatchResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendBatchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendBatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:solana.SendBatchResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendBatchResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_signature();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendBatchResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:solana.SendBatchResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes signature = 1;
  for (int i = 0, n = this->_internal_signature_size(); i < n; i++) {
    const auto& s = this->_internal_signature(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solana.SendBatchResponse)
  return target;
}

size_t SendBatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:solana.SendBatchResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes signature = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(signature_.size());
  for (int i = 0, n = signature_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      signature_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendBatchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendBatchResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendBatchResponse::GetClassData() const { return &_class_data_; }

void SendBatchResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SendBatchResponse *>(to)->MergeFrom(
      static_cast<const SendBatchResponse &>(from));
}


void SendBatchResponse::MergeFrom(const SendBatchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:solana.SendBatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  signature_.MergeFrom(from.signature_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendBatchResponse::CopyFrom(const SendBatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solana.SendBatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendBatchResponse::IsInitialized() const {
  return true;
}

void SendBatchResponse::InternalSwap(SendBatchResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  signature_.InternalSwap(&other->signature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendBatchResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fsolana_2eproto_getter, &descriptor_table_proto_2fsolana_2eproto_once,
      file_level_metadata_proto_2fsolana_2eproto[1]);
}

// ===================================================================

class Genesis::_Internal {
 public:
  static const ::basic::Keypair& payer(const Genesis* msg);
  static const ::basic::Keypair& mint(const Genesis* msg);
  static const ::basic::Pubkey& owner(const Genesis* msg);
};

const ::basic::Keypair&
Genesis::_Internal::payer(const Genesis* msg) {
  return *msg->payer_;
}
const ::basic::Keypair&
Genesis::_Internal::mint(const Genesis* msg) {
  return *msg->mint_;
}
const ::basic::Pubkey&
Genesis::_Internal::owner(const Genesis* msg) {
  return *msg->owner_;
}
void Genesis::clear_payer() {
  if (GetArenaForAllocation() == nullptr && payer_ != nullptr) {
    delete payer_;
  }
  payer_ = nullptr;
}
void Genesis::clear_mint() {
  if (GetArenaForAllocation() == nullptr && mint_ != nullptr) {
    delete mint_;
  }
  mint_ = nullptr;
}
void Genesis::clear_owner() {
  if (GetArenaForAllocation() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
}
Genesis::Genesis(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:solana.Genesis)
}
Genesis::Genesis(const Genesis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  decimals_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    decimals_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_decimals().empty()) {
    decimals_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_decimals(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_payer()) {
    payer_ = new ::basic::Keypair(*from.payer_);
  } else {
    payer_ = nullptr;
  }
  if (from._internal_has_mint()) {
    mint_ = new ::basic::Keypair(*from.mint_);
  } else {
    mint_ = nullptr;
  }
  if (from._internal_has_owner()) {
    owner_ = new ::basic::Pubkey(*from.owner_);
  } else {
    owner_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:solana.Genesis)
}

inline void Genesis::SharedCtor() {
decimals_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  decimals_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&payer_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owner_) -
    reinterpret_cast<char*>(&payer_)) + sizeof(owner_));
}

Genesis::~Genesis() {
  // @@protoc_insertion_point(destructor:solana.Genesis)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Genesis::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  decimals_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete payer_;
  if (this != internal_default_instance()) delete mint_;
  if (this != internal_default_instance()) delete owner_;
}

void Genesis::ArenaDtor(void* object) {
  Genesis* _this = reinterpret_cast< Genesis* >(object);
  (void)_this;
}
void Genesis::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Genesis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Genesis::Clear() {
// @@protoc_insertion_point(message_clear_start:solana.Genesis)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  decimals_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && payer_ != nullptr) {
    delete payer_;
  }
  payer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mint_ != nullptr) {
    delete mint_;
  }
  mint_ = nullptr;
  if (GetArenaForAllocation() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Genesis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .basic.Keypair payer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_payer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .basic.Keypair mint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .basic.Pubkey owner = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes decimals = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_decimals();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Genesis::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:solana.Genesis)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .basic.Keypair payer = 1;
  if (this->_internal_has_payer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::payer(this), target, stream);
  }

  // .basic.Keypair mint = 2;
  if (this->_internal_has_mint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mint(this), target, stream);
  }

  // .basic.Pubkey owner = 3;
  if (this->_internal_has_owner()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::owner(this), target, stream);
  }

  // bytes decimals = 4;
  if (!this->_internal_decimals().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_decimals(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solana.Genesis)
  return target;
}

size_t Genesis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:solana.Genesis)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes decimals = 4;
  if (!this->_internal_decimals().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_decimals());
  }

  // .basic.Keypair payer = 1;
  if (this->_internal_has_payer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payer_);
  }

  // .basic.Keypair mint = 2;
  if (this->_internal_has_mint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mint_);
  }

  // .basic.Pubkey owner = 3;
  if (this->_internal_has_owner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Genesis::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Genesis::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Genesis::GetClassData() const { return &_class_data_; }

void Genesis::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Genesis *>(to)->MergeFrom(
      static_cast<const Genesis &>(from));
}


void Genesis::MergeFrom(const Genesis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:solana.Genesis)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_decimals().empty()) {
    _internal_set_decimals(from._internal_decimals());
  }
  if (from._internal_has_payer()) {
    _internal_mutable_payer()->::basic::Keypair::MergeFrom(from._internal_payer());
  }
  if (from._internal_has_mint()) {
    _internal_mutable_mint()->::basic::Keypair::MergeFrom(from._internal_mint());
  }
  if (from._internal_has_owner()) {
    _internal_mutable_owner()->::basic::Pubkey::MergeFrom(from._internal_owner());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Genesis::CopyFrom(const Genesis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solana.Genesis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Genesis::IsInitialized() const {
  return true;
}

void Genesis::InternalSwap(Genesis* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &decimals_, lhs_arena,
      &other->decimals_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Genesis, owner_)
      + sizeof(Genesis::owner_)
      - PROTOBUF_FIELD_OFFSET(Genesis, payer_)>(
          reinterpret_cast<char*>(&payer_),
          reinterpret_cast<char*>(&other->payer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Genesis::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fsolana_2eproto_getter, &descriptor_table_proto_2fsolana_2eproto_once,
      file_level_metadata_proto_2fsolana_2eproto[2]);
}

// ===================================================================

class InitializeTokenAccount::_Internal {
 public:
  static const ::basic::Pubkey& mint(const InitializeTokenAccount* msg);
  static const ::basic::Keypair& owner_account(const InitializeTokenAccount* msg);
};

const ::basic::Pubkey&
InitializeTokenAccount::_Internal::mint(const InitializeTokenAccount* msg) {
  return *msg->mint_;
}
const ::basic::Keypair&
InitializeTokenAccount::_Internal::owner_account(const InitializeTokenAccount* msg) {
  return *msg->owner_account_;
}
void InitializeTokenAccount::clear_mint() {
  if (GetArenaForAllocation() == nullptr && mint_ != nullptr) {
    delete mint_;
  }
  mint_ = nullptr;
}
void InitializeTokenAccount::clear_owner_account() {
  if (GetArenaForAllocation() == nullptr && owner_account_ != nullptr) {
    delete owner_account_;
  }
  owner_account_ = nullptr;
}
InitializeTokenAccount::InitializeTokenAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:solana.InitializeTokenAccount)
}
InitializeTokenAccount::InitializeTokenAccount(const InitializeTokenAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mint()) {
    mint_ = new ::basic::Pubkey(*from.mint_);
  } else {
    mint_ = nullptr;
  }
  if (from._internal_has_owner_account()) {
    owner_account_ = new ::basic::Keypair(*from.owner_account_);
  } else {
    owner_account_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:solana.InitializeTokenAccount)
}

inline void InitializeTokenAccount::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mint_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owner_account_) -
    reinterpret_cast<char*>(&mint_)) + sizeof(owner_account_));
}

InitializeTokenAccount::~InitializeTokenAccount() {
  // @@protoc_insertion_point(destructor:solana.InitializeTokenAccount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InitializeTokenAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete mint_;
  if (this != internal_default_instance()) delete owner_account_;
}

void InitializeTokenAccount::ArenaDtor(void* object) {
  InitializeTokenAccount* _this = reinterpret_cast< InitializeTokenAccount* >(object);
  (void)_this;
}
void InitializeTokenAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitializeTokenAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitializeTokenAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:solana.InitializeTokenAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && mint_ != nullptr) {
    delete mint_;
  }
  mint_ = nullptr;
  if (GetArenaForAllocation() == nullptr && owner_account_ != nullptr) {
    delete owner_account_;
  }
  owner_account_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitializeTokenAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .basic.Pubkey mint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .basic.Keypair owner_account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_account(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitializeTokenAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:solana.InitializeTokenAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .basic.Pubkey mint = 1;
  if (this->_internal_has_mint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mint(this), target, stream);
  }

  // .basic.Keypair owner_account = 2;
  if (this->_internal_has_owner_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::owner_account(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solana.InitializeTokenAccount)
  return target;
}

size_t InitializeTokenAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:solana.InitializeTokenAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .basic.Pubkey mint = 1;
  if (this->_internal_has_mint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mint_);
  }

  // .basic.Keypair owner_account = 2;
  if (this->_internal_has_owner_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_account_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitializeTokenAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitializeTokenAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitializeTokenAccount::GetClassData() const { return &_class_data_; }

void InitializeTokenAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InitializeTokenAccount *>(to)->MergeFrom(
      static_cast<const InitializeTokenAccount &>(from));
}


void InitializeTokenAccount::MergeFrom(const InitializeTokenAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:solana.InitializeTokenAccount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mint()) {
    _internal_mutable_mint()->::basic::Pubkey::MergeFrom(from._internal_mint());
  }
  if (from._internal_has_owner_account()) {
    _internal_mutable_owner_account()->::basic::Keypair::MergeFrom(from._internal_owner_account());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitializeTokenAccount::CopyFrom(const InitializeTokenAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solana.InitializeTokenAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitializeTokenAccount::IsInitialized() const {
  return true;
}

void InitializeTokenAccount::InternalSwap(InitializeTokenAccount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitializeTokenAccount, owner_account_)
      + sizeof(InitializeTokenAccount::owner_account_)
      - PROTOBUF_FIELD_OFFSET(InitializeTokenAccount, mint_)>(
          reinterpret_cast<char*>(&mint_),
          reinterpret_cast<char*>(&other->mint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InitializeTokenAccount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fsolana_2eproto_getter, &descriptor_table_proto_2fsolana_2eproto_once,
      file_level_metadata_proto_2fsolana_2eproto[3]);
}

// ===================================================================

class Mint::_Internal {
 public:
  static const ::basic::Keypair& payer(const Mint* msg);
  static const ::basic::Keypair& signer(const Mint* msg);
  static const ::basic::Pubkey& mint(const Mint* msg);
  static const ::basic::Pubkey& recipient(const Mint* msg);
};

const ::basic::Keypair&
Mint::_Internal::payer(const Mint* msg) {
  return *msg->payer_;
}
const ::basic::Keypair&
Mint::_Internal::signer(const Mint* msg) {
  return *msg->signer_;
}
const ::basic::Pubkey&
Mint::_Internal::mint(const Mint* msg) {
  return *msg->mint_;
}
const ::basic::Pubkey&
Mint::_Internal::recipient(const Mint* msg) {
  return *msg->recipient_;
}
void Mint::clear_payer() {
  if (GetArenaForAllocation() == nullptr && payer_ != nullptr) {
    delete payer_;
  }
  payer_ = nullptr;
}
void Mint::clear_signer() {
  if (GetArenaForAllocation() == nullptr && signer_ != nullptr) {
    delete signer_;
  }
  signer_ = nullptr;
}
void Mint::clear_mint() {
  if (GetArenaForAllocation() == nullptr && mint_ != nullptr) {
    delete mint_;
  }
  mint_ = nullptr;
}
void Mint::clear_recipient() {
  if (GetArenaForAllocation() == nullptr && recipient_ != nullptr) {
    delete recipient_;
  }
  recipient_ = nullptr;
}
Mint::Mint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:solana.Mint)
}
Mint::Mint(const Mint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_payer()) {
    payer_ = new ::basic::Keypair(*from.payer_);
  } else {
    payer_ = nullptr;
  }
  if (from._internal_has_signer()) {
    signer_ = new ::basic::Keypair(*from.signer_);
  } else {
    signer_ = nullptr;
  }
  if (from._internal_has_mint()) {
    mint_ = new ::basic::Pubkey(*from.mint_);
  } else {
    mint_ = nullptr;
  }
  if (from._internal_has_recipient()) {
    recipient_ = new ::basic::Pubkey(*from.recipient_);
  } else {
    recipient_ = nullptr;
  }
  quantity_ = from.quantity_;
  // @@protoc_insertion_point(copy_constructor:solana.Mint)
}

inline void Mint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&payer_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&payer_)) + sizeof(quantity_));
}

Mint::~Mint() {
  // @@protoc_insertion_point(destructor:solana.Mint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Mint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete payer_;
  if (this != internal_default_instance()) delete signer_;
  if (this != internal_default_instance()) delete mint_;
  if (this != internal_default_instance()) delete recipient_;
}

void Mint::ArenaDtor(void* object) {
  Mint* _this = reinterpret_cast< Mint* >(object);
  (void)_this;
}
void Mint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Mint::Clear() {
// @@protoc_insertion_point(message_clear_start:solana.Mint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && payer_ != nullptr) {
    delete payer_;
  }
  payer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && signer_ != nullptr) {
    delete signer_;
  }
  signer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mint_ != nullptr) {
    delete mint_;
  }
  mint_ = nullptr;
  if (GetArenaForAllocation() == nullptr && recipient_ != nullptr) {
    delete recipient_;
  }
  recipient_ = nullptr;
  quantity_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .basic.Keypair payer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_payer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .basic.Keypair signer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .basic.Pubkey mint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .basic.Pubkey recipient = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_recipient(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 quantity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:solana.Mint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .basic.Keypair payer = 1;
  if (this->_internal_has_payer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::payer(this), target, stream);
  }

  // .basic.Keypair signer = 2;
  if (this->_internal_has_signer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::signer(this), target, stream);
  }

  // .basic.Pubkey mint = 3;
  if (this->_internal_has_mint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mint(this), target, stream);
  }

  // .basic.Pubkey recipient = 4;
  if (this->_internal_has_recipient()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::recipient(this), target, stream);
  }

  // uint64 quantity = 5;
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solana.Mint)
  return target;
}

size_t Mint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:solana.Mint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .basic.Keypair payer = 1;
  if (this->_internal_has_payer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payer_);
  }

  // .basic.Keypair signer = 2;
  if (this->_internal_has_signer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signer_);
  }

  // .basic.Pubkey mint = 3;
  if (this->_internal_has_mint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mint_);
  }

  // .basic.Pubkey recipient = 4;
  if (this->_internal_has_recipient()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recipient_);
  }

  // uint64 quantity = 5;
  if (this->_internal_quantity() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_quantity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Mint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mint::GetClassData() const { return &_class_data_; }

void Mint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Mint *>(to)->MergeFrom(
      static_cast<const Mint &>(from));
}


void Mint::MergeFrom(const Mint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:solana.Mint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_payer()) {
    _internal_mutable_payer()->::basic::Keypair::MergeFrom(from._internal_payer());
  }
  if (from._internal_has_signer()) {
    _internal_mutable_signer()->::basic::Keypair::MergeFrom(from._internal_signer());
  }
  if (from._internal_has_mint()) {
    _internal_mutable_mint()->::basic::Pubkey::MergeFrom(from._internal_mint());
  }
  if (from._internal_has_recipient()) {
    _internal_mutable_recipient()->::basic::Pubkey::MergeFrom(from._internal_recipient());
  }
  if (from._internal_quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mint::CopyFrom(const Mint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solana.Mint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mint::IsInitialized() const {
  return true;
}

void Mint::InternalSwap(Mint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Mint, quantity_)
      + sizeof(Mint::quantity_)
      - PROTOBUF_FIELD_OFFSET(Mint, payer_)>(
          reinterpret_cast<char*>(&payer_),
          reinterpret_cast<char*>(&other->payer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Mint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fsolana_2eproto_getter, &descriptor_table_proto_2fsolana_2eproto_once,
      file_level_metadata_proto_2fsolana_2eproto[4]);
}

// ===================================================================

class CreateAccount::_Internal {
 public:
  static const ::basic::Pubkey& mint(const CreateAccount* msg);
  static const ::basic::Pubkey& owner(const CreateAccount* msg);
  static const ::basic::Keypair& payer(const CreateAccount* msg);
};

const ::basic::Pubkey&
CreateAccount::_Internal::mint(const CreateAccount* msg) {
  return *msg->mint_;
}
const ::basic::Pubkey&
CreateAccount::_Internal::owner(const CreateAccount* msg) {
  return *msg->owner_;
}
const ::basic::Keypair&
CreateAccount::_Internal::payer(const CreateAccount* msg) {
  return *msg->payer_;
}
void CreateAccount::clear_mint() {
  if (GetArenaForAllocation() == nullptr && mint_ != nullptr) {
    delete mint_;
  }
  mint_ = nullptr;
}
void CreateAccount::clear_owner() {
  if (GetArenaForAllocation() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
}
void CreateAccount::clear_payer() {
  if (GetArenaForAllocation() == nullptr && payer_ != nullptr) {
    delete payer_;
  }
  payer_ = nullptr;
}
CreateAccount::CreateAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:solana.CreateAccount)
}
CreateAccount::CreateAccount(const CreateAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mint()) {
    mint_ = new ::basic::Pubkey(*from.mint_);
  } else {
    mint_ = nullptr;
  }
  if (from._internal_has_owner()) {
    owner_ = new ::basic::Pubkey(*from.owner_);
  } else {
    owner_ = nullptr;
  }
  if (from._internal_has_payer()) {
    payer_ = new ::basic::Keypair(*from.payer_);
  } else {
    payer_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:solana.CreateAccount)
}

inline void CreateAccount::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mint_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&payer_) -
    reinterpret_cast<char*>(&mint_)) + sizeof(payer_));
}

CreateAccount::~CreateAccount() {
  // @@protoc_insertion_point(destructor:solana.CreateAccount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete mint_;
  if (this != internal_default_instance()) delete owner_;
  if (this != internal_default_instance()) delete payer_;
}

void CreateAccount::ArenaDtor(void* object) {
  CreateAccount* _this = reinterpret_cast< CreateAccount* >(object);
  (void)_this;
}
void CreateAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:solana.CreateAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && mint_ != nullptr) {
    delete mint_;
  }
  mint_ = nullptr;
  if (GetArenaForAllocation() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
  if (GetArenaForAllocation() == nullptr && payer_ != nullptr) {
    delete payer_;
  }
  payer_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .basic.Pubkey mint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .basic.Pubkey owner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .basic.Keypair payer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_payer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:solana.CreateAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .basic.Pubkey mint = 1;
  if (this->_internal_has_mint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mint(this), target, stream);
  }

  // .basic.Pubkey owner = 2;
  if (this->_internal_has_owner()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::owner(this), target, stream);
  }

  // .basic.Keypair payer = 3;
  if (this->_internal_has_payer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::payer(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:solana.CreateAccount)
  return target;
}

size_t CreateAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:solana.CreateAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .basic.Pubkey mint = 1;
  if (this->_internal_has_mint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mint_);
  }

  // .basic.Pubkey owner = 2;
  if (this->_internal_has_owner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_);
  }

  // .basic.Keypair payer = 3;
  if (this->_internal_has_payer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payer_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateAccount::GetClassData() const { return &_class_data_; }

void CreateAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateAccount *>(to)->MergeFrom(
      static_cast<const CreateAccount &>(from));
}


void CreateAccount::MergeFrom(const CreateAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:solana.CreateAccount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mint()) {
    _internal_mutable_mint()->::basic::Pubkey::MergeFrom(from._internal_mint());
  }
  if (from._internal_has_owner()) {
    _internal_mutable_owner()->::basic::Pubkey::MergeFrom(from._internal_owner());
  }
  if (from._internal_has_payer()) {
    _internal_mutable_payer()->::basic::Keypair::MergeFrom(from._internal_payer());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateAccount::CopyFrom(const CreateAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:solana.CreateAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAccount::IsInitialized() const {
  return true;
}

void CreateAccount::InternalSwap(CreateAccount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateAccount, payer_)
      + sizeof(CreateAccount::payer_)
      - PROTOBUF_FIELD_OFFSET(CreateAccount, mint_)>(
          reinterpret_cast<char*>(&mint_),
          reinterpret_cast<char*>(&other->mint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAccount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fsolana_2eproto_getter, &descriptor_table_proto_2fsolana_2eproto_once,
      file_level_metadata_proto_2fsolana_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace solana
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::solana::SendBatchRequest* Arena::CreateMaybeMessage< ::solana::SendBatchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::solana::SendBatchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::solana::SendBatchResponse* Arena::CreateMaybeMessage< ::solana::SendBatchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::solana::SendBatchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::solana::Genesis* Arena::CreateMaybeMessage< ::solana::Genesis >(Arena* arena) {
  return Arena::CreateMessageInternal< ::solana::Genesis >(arena);
}
template<> PROTOBUF_NOINLINE ::solana::InitializeTokenAccount* Arena::CreateMaybeMessage< ::solana::InitializeTokenAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::solana::InitializeTokenAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::solana::Mint* Arena::CreateMaybeMessage< ::solana::Mint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::solana::Mint >(arena);
}
template<> PROTOBUF_NOINLINE ::solana::CreateAccount* Arena::CreateMaybeMessage< ::solana::CreateAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::solana::CreateAccount >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
